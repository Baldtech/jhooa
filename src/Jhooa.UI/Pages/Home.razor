@page "/"
@using Microsoft.Extensions.Localization
@using Jhooa.UI.Features.Home.Components
@using Microsoft.EntityFrameworkCore

@inject ApplicationDbContext DbContext
@inject IStringLocalizer<Features.Home.Resources.Home> Loc
@inject IStringLocalizer<Resources.Shared> LocShared
@inject IJSRuntime Js

<PageTitle>@LocShared["TitleHome"]</PageTitle>



<HomeConcept />

<div class="h-6"></div>

<HomeVideo />

<div class="h-8"></div>

<h3 class="text-center font-monetaBold text-jhooa-peach-100 text-4xl mt-6">@Loc["TitleCourage"]</h3>

<div class="h-6"></div>

<HomeEvents />

<div class="h-6"></div>

<HomeInterview />

<div class="h-12"></div>

<HomeExperience />

<script src="js/mobileMenu.js"></script>


@code {
    [SupplyParameterFromQuery(Name = "session-id")]
    public string? CheckoutSessionId { get; set; }
    
    [SupplyParameterFromQuery(Name = "cancel")]
    public bool? CancelCheckoutSession { get; set; }
    

    protected override async Task OnInitializedAsync()
    {
        if (CheckoutSessionId is not null && CancelCheckoutSession == true)
        {
            var sub = await DbContext.Subscriptions
                .FirstOrDefaultAsync(s => s.StripeSessionCheckoutId == CheckoutSessionId);

            if (sub is not null)
            {
                var user = await DbContext.Users.FirstAsync(user => user.Id == sub.UserId);
                await DbContext.Dreams.Where(d => d.UserId == user.Id)
                    .ExecuteDeleteAsync();
                await DbContext.Subscriptions.Where(s => s.UserId == user.Id)
                    .ExecuteDeleteAsync();
                await DbContext.Users.Where(u => u.Id == user.Id)
                    .ExecuteDeleteAsync();

                await DbContext.SaveChangesAsync();
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var module = await Js.InvokeAsync<IJSObjectReference>("import",
                "./js/mobileMenuHome.js");
    
            await module.InvokeVoidAsync("loadMobileMenu");
        }
    }
}