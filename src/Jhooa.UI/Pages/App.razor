@using Jhooa.UI.Configuration
@using Microsoft.AspNetCore.Localization
@inject IJSRuntime Js

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <base href="/"/>
    @* <link rel="stylesheet" href="app.css"/> *@
    @* <link rel="stylesheet" href="Jhooa.UI.styles.css"/> *@
    <link rel="stylesheet" href="_content/BytexDigital.Blazor.Components.CookieConsent/styles.min.css" />
    <link href="css/app.min.css" rel="stylesheet" />
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    
    <HeadOutlet/>
</head>

<body class="min-h-screen flex flex-col">
    <Routes/>
    <script src="_framework/blazor.web.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/flowbite@3.1.2/dist/flowbite.min.js"></script>
    
    <script>
        Blazor.addEventListener('enhancedload', function () {
            initFlowbite();
        });
        
        document.addEventListener("DOMContentLoaded", () => {
            // Mobile menu toggle

            const mobileMenuButton = document.querySelector(".mobile-menu-button");
            const mobileMenu = document.querySelector(".navigation-menu");

            mobileMenuButton.addEventListener("click", () => {
                mobileMenu.classList.toggle("hidden");
            });
        });

    </script>
    </body>

</html>

@code {
    [CascadingParameter] public HttpContext? HttpContext { get; set; }

    protected override void OnInitialized()
    {
        var currentCulture = CultureInfo.CurrentCulture;
        if (HttpContext?.User.Identity?.IsAuthenticated == true)
        {
            if (HttpContext.User.Claims.Any(c => string.Equals(c.Type, Constants.Cookie.Culture, StringComparison.OrdinalIgnoreCase)))
            {
                var culture = HttpContext.User.Claims.First(c => string.Equals(c.Type, Constants.Cookie.Culture, StringComparison.OrdinalIgnoreCase)).Value;
                var cultureInfo = CultureInfo.GetCultureInfo(culture);
                if (!Equals(cultureInfo, currentCulture))
                {
                    currentCulture = cultureInfo;
                }
            }
        }

        HttpContext?.Response.Cookies.Append(
            Constants.Cookie.Culture,
            CookieRequestCultureProvider.MakeCookieValue(
                new RequestCulture(
                    currentCulture,
                    currentCulture)));
    }
}