@using System.Diagnostics.CodeAnalysis
@using System.Linq.Expressions
@inherits InputBase<string>

<div
    class="inline-flex items-center space-x-3 w-full
         rounded-full bg-[#CDAEA0] border-2 border-white
         px-4 py-2"
>
    <!-- SVG Icon on the left -->
    <svg
        class="w-5 h-5 text-white"
        fill="currentColor"
        viewBox="0 0 24 24"
    >
        <path
            d="M12 2C6.49 2 2 6.49 2 12
         c0 5.51 4.49 10 10 10s10-4.49 10-10
         S17.51 2 12 2zm0 18
         c-4.42 0-8-3.58-8-8s3.58-8 8-8
         8 3.58 8 8-3.58 8-8 8z"
        />
    </svg>

    <!-- Label and Input stacked vertically -->
    <div class="flex flex-col space-y-1 w-full">
        <!-- Label in teal -->
        <label for="@_fieldId" class="text-teal-700 font-medium italic">
            @DisplayName
        </label>

        <input
            id="@_fieldId"
            type="@Type"
            name="@NameAttributeValue"
            placeholder="@Placeholder"
            class="bg-transparent text-white placeholder-white
             border-none focus:outline-none focus:ring-0 p-0 w-full @CssClass"
            @bind="@CurrentValue"/>
    </div>
</div>

<ValidationMessage For="@ValidationFor" class="text-danger"/>


@code {
    [Parameter, EditorRequired] public Expression<Func<string>> ValidationFor { get; set; } = default!;
    [Parameter] public string? Type { get; set; } = "text";
    [Parameter] public string? Placeholder { get; set; } = "";
    [Parameter] public string? Autocomplete { get; set; }
    
    private readonly Guid _fieldId = Guid.NewGuid();
    
    protected override void OnInitialized()
    {
        if (ValidationFor == null)
        {
            throw new InvalidOperationException($"{nameof(JhooaInputText)} requires a {nameof(ValidationFor)} parameter.");
        }

        base.OnInitialized();
    }

    protected override bool TryParseValueFromString(string? value, [MaybeNullWhen(false)] out string result, [NotNullWhen(false)] out string? validationErrorMessage)
    {
        result = value!;
        validationErrorMessage = null;
        return true;
    }

}