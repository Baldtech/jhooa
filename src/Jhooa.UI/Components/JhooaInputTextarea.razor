@using System.Diagnostics.CodeAnalysis
@using System.Linq.Expressions
@inherits InputBase<string>

<div>
    <label for="@_fieldId" class="block mb-1 text-sm">@DisplayName</label>

    <textarea
        id="@_fieldId"
        type="@Type"
        name="@NameAttributeValue"
        class="w-full border border-white bg-transparent text-white placeholder-gray-300 px-3 py-2 focus:outline-none @CssClass"
        @bind="@CurrentValue"></textarea>
    <ValidationMessage For="@ValidationFor" class="text-danger"/>
</div>

@code {
    [Parameter, EditorRequired] public Expression<Func<string>> ValidationFor { get; set; } = default!;
    [Parameter] public string? Type { get; set; } = "text";
    [Parameter] public string? Autocomplete { get; set; }
    
    private readonly Guid _fieldId = Guid.NewGuid();
    
    protected override void OnInitialized()
    {
        if (ValidationFor == null)
        {
            throw new InvalidOperationException($"{nameof(JhooaInputText)} requires a {nameof(ValidationFor)} parameter.");
        }

        base.OnInitialized();
    }

    protected override bool TryParseValueFromString(string? value, [MaybeNullWhen(false)] out string result, [NotNullWhen(false)] out string? validationErrorMessage)
    {
        result = value!;
        validationErrorMessage = null;
        return true;
    }

}