@using Microsoft.Extensions.Localization
@inject NavigationManager Navigation
@inject IStringLocalizer<CultureSelector> Loc
@rendermode InteractiveServer

<select id="language" @onchange="OnCultureChange" value="@_selectedCulture.Name"
             class="text-white bg-transparent border-0 md:inline-block md:float-end md:mx-5 focus:border-0 active:border-0">
    <option value="fr-FR" >FR</option>
    <option value="en-GB" >EN</option>
</select>


@code
{
    private CultureInfo _selectedCulture = CultureInfo.CurrentCulture.Name.StartsWith("fr") ? new CultureInfo("fr-FR") : new CultureInfo("en-GB");

    private async Task OnCultureChange(ChangeEventArgs e)
    {
        var selectedValue = e.Value?.ToString();
        if (!string.IsNullOrEmpty(selectedValue))
        {
            var culture = new CultureInfo(selectedValue);
            await ApplySelectedCultureAsync(culture);
        }
    }
    
    
    private Task ApplySelectedCultureAsync(CultureInfo culture)
    {
        if (Equals(CultureInfo.CurrentCulture, culture))
            return Task.CompletedTask;

        var uri = new Uri(Navigation.Uri)
            .GetComponents(UriComponents.PathAndQuery, UriFormat.Unescaped);
        var cultureEscaped = Uri.EscapeDataString(culture.Name);
        var uriEscaped = Uri.EscapeDataString(uri);

        Navigation.NavigateTo(
            $"Culture/Set?culture={cultureEscaped}&redirectUri={uriEscaped}",
            forceLoad: true);

        return Task.CompletedTask;
    }
}