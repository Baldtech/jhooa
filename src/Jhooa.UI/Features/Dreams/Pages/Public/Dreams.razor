@page "/Account/Manage/Dreams"
@attribute [Authorize]
@layout ManageLayout

@using System.ComponentModel.DataAnnotations
@using Jhooa.UI.Configuration
@using Jhooa.UI.Features.Dreams.Models
@using Jhooa.UI.Features.Identity
@using Jhooa.UI.Features.Identity.Components
@using Jhooa.UI.Features.Identity.Models
@using Jhooa.UI.Features.Identity.Shared
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Localization

@inject IStringLocalizer<Resources.Dreams> Loc
@inject IdentityUserAccessor UserAccessor
@inject ApplicationDbContext DbContext
@inject IdentityRedirectManager RedirectManager
@inject IStringLocalizer<Jhooa.UI.Features.Identity.Resources.Identity> LocIdentity

<PageTitle>@Loc["MyDreams"]</PageTitle>

<section class="max-w-screen-md mx-auto  text-white px-2 mb-4">
    <h2 class="text-xl font-semibold text-center mb-4">@Loc["AttemptToTitle"]</h2>

    <p class="text-center mb-4">@Loc["AttemptToDesc"]</p>

    @if (Input is not null)
    {
        <EditForm Model="Input" method="post" OnValidSubmit="OnValidSubmitAsync" FormName="login" class="space-y-6">
            <StatusMessage/>
            <DataAnnotationsValidator/>

            <div class="grid grid-cols-1 gap-4">
                <div class="space-y-3">
                    <JhooaDreamInput DisplayName="@LocIdentity["FormSmallDream"]"
                                     Id="@(Constants.DreamIds.SmallDreamId)"
                                     Content="@Input.SmallDream"
                                     DreamType="DreamTypes.Small"/>
                    <JhooaDreamInput DisplayName="@LocIdentity["FormMediumDream"]"
                                     Id="@(Constants.DreamIds.MediumDreamId)"
                                     Content="@Input.MediumDream"
                                     DreamType="DreamTypes.Medium"/>
                    <JhooaDreamInput DisplayName="@LocIdentity["FormBigDream"]"
                                     Id="@(Constants.DreamIds.BigDreamId)"
                                     Content="@Input.BigDream"
                                     DreamType="DreamTypes.Big"/>

                    <input type="hidden" name="Input.SmallDream" @bind-value="Input.SmallDream"
                           id="small-dreams-hidden"/>
                    <input type="hidden" name="Input.MediumDream" @bind-value="Input.MediumDream"
                           id="medium-dreams-hidden"/>
                    <input type="hidden" name="Input.BigDream" @bind-value="Input.BigDream" id="big-dreams-hidden"/>


                </div>
                <div class="col-span-2 flex justify-center gap-3 mt-4  mb-10">
                    <InputDreams SmallDream="@Input.SmallDream" MediumDream="@Input.MediumDream"
                                 BigDream="@Input.BigDream"/>
                </div>

                <div class="col-span-2 flex justify-center gap-3 mt-4  mb-10">
                    <button type="submit" class="border-2 border-white px-10 py-3">@Loc["SaveChanges"]</button>
                </div>
            </div>
        </EditForm>
    }
</section>

<script src="js/mobileMenu.js"></script>


@code {
    private ApplicationUser _user = null!;

    [SupplyParameterFromForm] private InputModel? Input { get; set; }

    [CascadingParameter] private HttpContext HttpContext { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        _user = await UserAccessor.GetRequiredUserAsync(HttpContext);

        if (Input is null)
        {
            var dreams = await DbContext.Dreams.Where(d => d.UserId == _user.Id).ToListAsync();

            Input = new InputModel
            {
                SmallDream = dreams.FirstOrDefault(d => d.Type == DreamTypes.Small)?.Title,
                MediumDream = dreams.FirstOrDefault(d => d.Type == DreamTypes.Medium)?.Title,
                BigDream = dreams.FirstOrDefault(d => d.Type == DreamTypes.Big)?.Title
            };
        }
    }

    private async Task OnValidSubmitAsync()
    {
        await UpdateDream(DreamTypes.Small, Input!.SmallDream);
        await UpdateDream(DreamTypes.Medium, Input!.MediumDream);
        await UpdateDream(DreamTypes.Big, Input!.BigDream);

        await DbContext.SaveChangesAsync();

        RedirectManager.RedirectToCurrentPageWithStatus(Loc["DreamsUpdated"], HttpContext);
    }


    private async Task UpdateDream(DreamTypes type, string? newDream)
    {
        await DbContext.Dreams.Where(d => d.UserId == _user.Id && d.Type == type).ExecuteDeleteAsync();

        if (!string.IsNullOrWhiteSpace(newDream))
        {
            DbContext.Dreams.Add(new Dream
            {
                Title = newDream,
                Type = type,
                UserId = _user.Id
            });
        }
    }

    private sealed class InputModel
    {
        [Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Resources.Dreams))]
        [StringLength(maximumLength: 100, MinimumLength = 3, ErrorMessageResourceName = "FieldLength", ErrorMessageResourceType = typeof(Resources.Dreams))]
        public string? SmallDream { get; set; } = "";

        [Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Resources.Dreams))]
        [StringLength(maximumLength: 100, MinimumLength = 3, ErrorMessageResourceName = "FieldLength", ErrorMessageResourceType = typeof(Resources.Dreams))]
        public string? MediumDream { get; set; } = "";

        [Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Resources.Dreams))]
        [StringLength(maximumLength: 100, MinimumLength = 3, ErrorMessageResourceName = "FieldLength", ErrorMessageResourceType = typeof(Resources.Dreams))]
        public string? BigDream { get; set; } = "";
    }

}