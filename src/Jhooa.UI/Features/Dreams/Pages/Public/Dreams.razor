@page "/Account/Manage/Dreams"
@attribute [Authorize]
@layout ManageLayout

@using System.ComponentModel.DataAnnotations
@using Jhooa.UI.Features.Dreams.Models
@using Jhooa.UI.Features.Identity
@using Jhooa.UI.Features.Identity.Models
@using Jhooa.UI.Features.Identity.Shared
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Localization
@using Jhooa.UI.Features.Identity.Components

@inject IStringLocalizer<Resources.Dreams> Loc
@inject IdentityUserAccessor UserAccessor
@inject ApplicationDbContext DbContext
@inject IdentityRedirectManager RedirectManager

<PageTitle>@Loc["MyDreams"]</PageTitle>

<section class="max-w-screen-md mx-auto  text-white">
    <h2 class="text-xl font-semibold text-center mb-4">@Loc["AttemptToTitle"]</h2>

    <p class="text-center mb-4">@Loc["AttemptToDesc"]</p>

@if (Input is not null)
{
    <EditForm Model="Input" method="post" OnValidSubmit="OnValidSubmitAsync" FormName="login" class="space-y-6">
        <StatusMessage/>
        <DataAnnotationsValidator/>

        <div class="grid grid-cols-1 gap-4">
            <div class="space-y-3">
                <JhooaDreamInput @bind-Value="Input.SmallDream" DisplayName="@Loc["FormSmallDream"]"
                                 Placeholder="@Loc["SmallDreamPlaceholder"]"
                                 ValidationFor="@(() => Input.SmallDream)" Autocomplete=""/>
                <JhooaDreamInput @bind-Value="Input.MediumDream" DisplayName="@Loc["FormMediumDream"]"
                                 Placeholder="@Loc["MediumDreamPlaceholder"]"
                                 ValidationFor="@(() => Input.MediumDream)" Autocomplete=""/>
                <JhooaDreamInput @bind-Value="Input.BigDream" DisplayName="@Loc["FormBigDream"]"
                                 Placeholder="@Loc["BigDreamPlaceholder"]"
                                 ValidationFor="@(() => Input.BigDream)" Autocomplete=""/>
            </div>
            
            <button type="submit" class="border-2 border-white p-3 ">@Loc["SaveChanges"]</button>

        </div>
    </EditForm>
}
</section>

@code {
    private ApplicationUser _user = default!;

    [SupplyParameterFromForm] private InputModel? Input { get; set; }

    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        _user = await UserAccessor.GetRequiredUserAsync(HttpContext);

        if (Input is null)
        {
            var dreams = await DbContext.Dreams.Where(d => d.UserId == _user.Id).ToListAsync();

            Input = new InputModel
            {
                SmallDream = dreams.First(d => d.Type == DreamTypes.Small).Title,
                MediumDream = dreams.First(d => d.Type == DreamTypes.Medium).Title,
                BigDream = dreams.First(d => d.Type == DreamTypes.Big).Title
            };
        }
    }

    private async Task OnValidSubmitAsync()
    {
        await UpdateDream(DreamTypes.Small, Input!.SmallDream);
        await UpdateDream(DreamTypes.Medium, Input!.MediumDream);
        await UpdateDream(DreamTypes.Big, Input!.BigDream);

        await DbContext.SaveChangesAsync();
        
        RedirectManager.RedirectToCurrentPageWithStatus(Loc["DreamsUpdated"], HttpContext);

    }


    private async Task UpdateDream(DreamTypes type, string newDream)
    {
        await DbContext.Dreams.Where(d => d.UserId == _user.Id && d.Type == type).ExecuteDeleteAsync();


        if (!string.IsNullOrWhiteSpace(newDream))
        {
            DbContext.Dreams.Add(new Dream
            {
                Title = newDream,
                Type = type,
                UserId = _user.Id
            });
        }
    }

    private sealed class InputModel
    {
        [Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Resources.Dreams))]
        [StringLength(maximumLength: 100, MinimumLength = 3, ErrorMessageResourceName = "FieldLength", ErrorMessageResourceType = typeof(Resources.Dreams))]
        public string SmallDream { get; set; } = "";

        [Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Resources.Dreams))]
        [StringLength(maximumLength: 100, MinimumLength = 3, ErrorMessageResourceName = "FieldLength", ErrorMessageResourceType = typeof(Resources.Dreams))]
        public string MediumDream { get; set; } = "";

        [Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Resources.Dreams))]
        [StringLength(maximumLength: 100, MinimumLength = 3, ErrorMessageResourceName = "FieldLength", ErrorMessageResourceType = typeof(Resources.Dreams))]
        public string BigDream { get; set; } = "";
    }

}