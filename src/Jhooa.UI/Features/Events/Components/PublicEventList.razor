@attribute [StreamRendering]

@using Jhooa.UI.Features.Events.Models
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Localization
@inject ApplicationDbContext DbContext
@inject IStringLocalizer<Resources.Events> Loc

<div class="flex space-x-10 pb-10">
    @if (_events is not null && _events.Count > 0)
    {
        <div class="relative w-full">
            <!-- Carousel wrapper -->
            <div class="carousel flex overflow-hidden w-full"
                 ontouchstart="startTouch(event)"
                 ontouchmove="moveTouch(event)"
                 ontouchend="endTouch(event)">
                <!-- Item 1 -->
                @foreach (var ev in _events.Where(ev => ev.IsVisible).OrderBy(ev => ev.StartDate))
                {
                    <div class="carousel-item flex-none w-[95%] md:w-1/3 px-4">
                        <div class="w-full md:w-[376px] md:mx-auto">
                            <EventCard Event="ev"/>
                        </div>
                    </div>
                }

                <!-- Controls -->
                <button
                    class="absolute top-1/2 -left-[2.3rem] md:-left-[3rem] z-10 transform -translate-y-1/2  p-2 "
                    onclick="prevSlide()"
                >
                    <img src="images/chevron-left.svg" class="h-[30px]" alt="prev" />
                </button>
                <button
                    class="absolute top-1/2 -right-[2.3rem] md:-right-[3rem] z-10 transform -translate-y-1/2 p-2"
                    onclick="nextSlide()"
                >
                    <img src="images/chevron-right.svg" class="h-[30px]" alt="prev" />
                </button>
            </div>
        </div>
    }
    else if (_events is not null && _events.Count == 0)
    {
        <p>@Loc["NoNextEvents"]</p>
    }
    else
    {
        <p>@Loc["Loading"]</p>
    }
</div>


<script>

    var startX = 0;
    var endX = 0;

    function startTouch(event) {
        startX = event.touches[0].clientX;
    }

    function moveTouch(event) {
        // Prevent scrolling the page while swiping
        event.preventDefault();
    }

    function endTouch(event) {
        endX = event.changedTouches[0].clientX;

        if (startX - endX > 50) {
            // Swiped left, go to next slide
            nextSlide();
        } else if (endX - startX > 50) {
            // Swiped right, go to previous slide
            prevSlide();
        }
    }
    
    function nextSlide() {
        var carousel = document.querySelector('.carousel');
        let slideWidth = carousel.querySelector('.carousel-item').offsetWidth;

        carousel.scrollBy({
            left: slideWidth,
            behavior: 'smooth',
        });
    }

    function prevSlide() {
        var carousel = document.querySelector('.carousel');
        let slideWidth = carousel.querySelector('.carousel-item').offsetWidth;

        carousel.scrollBy({
            left: -slideWidth,
            behavior: 'smooth',
        });
    }

</script>

@code {
    private List<EventListViewModel>? _events;

    protected override async Task OnInitializedAsync()
    {
        _events ??= await DbContext.Events
            .Where(ev => ev.StartDate >= DateTimeOffset.Now)
            .OrderBy(o => o.StartDate)
            .Select(ev => new EventListViewModel()
            {
                Id = ev.Id,
                Title = CultureInfo.CurrentCulture.Name == "en-GB" ? ev.TitleEn : ev.Title,
                StartDate = ev.StartDate,
                ImageUrl = ev.ImageUrl,
                IsVisible = false
            })
            .ToListAsync();

        if (_events.Any())
        {
            foreach (var item in _events.OrderBy(ev => ev.StartDate))
            {
                item.IsVisible = true;
            }
        }
    }

}