@using Jhooa.UI.Features.Events.Models
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Localization

@inject IStringLocalizer<Resources.Events> Loc
@inject ApplicationDbContext DbContext
@inject NavigationManager NavigationManager


@rendermode InteractiveServer

<PaginationComponent TItem="Event" Items="_events" DefaultPageSize="15">
    <ChildContentHeader>
        <tr>
            <th>@Loc["Title"]</th>
            <th>@Loc["StartDate"]</th>
            <th>@Loc["EndDate"]</th>
            <th>@Loc["Participants"]</th>
            <th>@Loc["Actions"]</th>
        </tr>
    </ChildContentHeader>
    <ChildContentRow Context="ev">
        <tr class="even:bg-jhooa-table-even odd:bg-jhooa-table-odd">
            <td>@(CultureInfo.CurrentCulture.Name == "en-GB" ? ev.TitleEn : ev.Title)</td>
            <td>@ev.StartDate.ToString("d")</td>
            <td>@ev.EndDate.ToString("d")</td>
            <td><a class="px-6 py-1 text-sm bg-jhooa-peach-100 rounded-3xl font-amsiProLight" href="/Admin/Event/@ev.Id/participants">@ev.Registrations.Count</a></td>
            <td>
                <a class="px-6 py-1 text-sm bg-jhooa-peach-100 rounded-3xl font-amsiProLight" href="/Admin/Event/@ev.Id">@Loc["Edit"]</a>
                <a class="px-6 py-1 text-sm bg-jhooa-peach-100 rounded-3xl font-amsiProLight" href="/Admin/Event/@ev.Id/pictures">@Loc["UpdatePictures"]</a>
                <EditForm Model="ev" class="inline"
                          FormName="@($"form-event-{ev.Id}")"
                          OnValidSubmit="@(async () => { await DeleteEventAsync(ev.Id); })">
                    <button type="submit" class=" px-6 py-1 text-sm bg-jhooa-peach-100 rounded-3xl font-amsiProLight">@Loc["Delete"]</button>
                </EditForm>
            </td>
        </tr>
    </ChildContentRow>
</PaginationComponent>

@code {
    
    private List<Event> _events = [];
    [Parameter] public EventCallback<int?> NbEventsCallback { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _events = await DbContext.Events.Include(i => i.Registrations).ToListAsync();
        await NbEventsCallback.InvokeAsync(_events.Count);
    }

    private async Task DeleteEventAsync(Guid? eventId)
    {
        if (eventId.HasValue)
        {
            await DbContext.Events.Where(e => e.Id == eventId).ExecuteDeleteAsync();
            NavigationManager.NavigateTo("/Admin/Events", true);
        }
    }

}