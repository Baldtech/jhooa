@using System.Security.Claims
@using Jhooa.UI.Features.Identity
@using Jhooa.UI.Managers
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Localization

@inject IStringLocalizer<Resources.Events> Loc
@inject NavigationManager NavigationManager
@inject ApplicationDbContext DbContext
@inject IdentityUserAccessor UserAccessor
@inject AuthenticationStateProvider AuthStateProvider
@inject RedirectManager RedirectManager
@rendermode InteractiveServer

@if (!IsPast)
{
    @if (_userId is null)
    {
        <p class="text-sm text-jhooa-brick-500">@Loc["RequiresAuthentication"]</p>
    }
    else if (_isRegistered)
    {
        <p class="text-jhooa-teal-200">@Loc["AlreadyRegistered"]</p>
        <button
            class="bg-jhooa-teal-100 text-white py-2 px-8 rounded hover:bg-jhooa-teal-100" @onclick="() => UnregisterToEventAsync(EventId)">
            @Loc["RemoveRegistration"]
        </button>
    }
    else
    {
        <button
            class="bg-jhooa-teal-100 text-white py-2 px-8 rounded hover:bg-jhooa-teal-100" @onclick="() => RegisterToEventAsync(EventId)">
            @Loc["Register"]
        </button>
    }
}

@code {


    [Parameter] public Guid EventId { get; set; }
    [Parameter] public bool IsPast { get; set; }

    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    private bool _isRegistered;
    private Guid? _userId;

    private async Task RegisterToEventAsync(Guid? eventId)
    {
        if (eventId.HasValue && _userId is not null)
        {
            await DbContext.Registrations.AddAsync(new Jhooa.UI.Features.Events.Models.Registration()
            {
                EventId = EventId,
                UserId = _userId.Value,
            });
            await DbContext.SaveChangesAsync();
            //RedirectManager.RedirectToWithStatus($"/Events/{EventId}", Loc["Registered"], HttpContext);
            _isRegistered = true;
            StateHasChanged();
        }
    }
    
    private async Task UnregisterToEventAsync(Guid? eventId)
    {
        if (eventId.HasValue && _userId is not null)
        {
            await DbContext.Registrations.Where(r => r.UserId == _userId && r.EventId == EventId).ExecuteDeleteAsync();
            await DbContext.SaveChangesAsync();
            _isRegistered = false;
            StateHasChanged();
            //RedirectManager.RedirectToWithStatus($"/Events/{EventId}", Loc["Unregistered"], HttpContext);
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();

        if (authState.User.Identity?.IsAuthenticated == true)
        {
            if (authState.User.Claims.Any(c => c.Type == ClaimTypes.NameIdentifier))
            {
                _userId = new Guid(authState.User.Claims.First(c => c.Type == ClaimTypes.NameIdentifier).Value);
            }

            _isRegistered = await DbContext.Registrations.AnyAsync(r => r.UserId == _userId && r.EventId == EventId);
                
        }
    }
}