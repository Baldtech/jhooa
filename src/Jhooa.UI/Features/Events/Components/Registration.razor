@using System.Security.Claims
@using Jhooa.UI.Features.Subscriptions.Models
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Localization

@inject IStringLocalizer<Resources.Events> Loc
@inject ApplicationDbContext DbContext
@inject AuthenticationStateProvider AuthStateProvider
@rendermode InteractiveServer

@if (!IsPast)
{
    @switch (CanRegister)
    {
        case false:
            <p class="text-sm text-jhooa-brick-500">@Loc["RequiresAuthentication"]</p>
            break;
        case true when _isRegistered:
            <p class="text-jhooa-teal-200">@Loc["AlreadyRegistered"]</p>
            <button
                class="bg-jhooa-teal-100 text-white py-2 px-8 rounded hover:bg-jhooa-teal-100"
                @onclick="() => UnregisterToEventAsync(EventId)">
                @Loc["RemoveRegistration"]
            </button>
            break;
        default:
            <button
                class="bg-jhooa-teal-100 text-white py-2 px-8 rounded hover:bg-jhooa-teal-100"
                @onclick="() => RegisterToEventAsync(EventId)">
                @Loc["Register"]
            </button>
            break;
    }
}

@code {


    [Parameter] public Guid EventId { get; set; }
    [Parameter] public DateTimeOffset Date { get; set; }
    [Parameter] public bool IsPast { get; set; }
    [Parameter] public bool CanRegister { get; set; }

    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    private bool _isRegistered;
    private Guid? _userId;

    private async Task RegisterToEventAsync(Guid? eventId)
    {
        if (eventId.HasValue && _userId is not null)
        {
            await DbContext.Registrations.AddAsync(new Jhooa.UI.Features.Events.Models.Registration()
            {
                EventId = EventId,
                UserId = _userId.Value,
            });
            await DbContext.SaveChangesAsync();
            _isRegistered = true;
            StateHasChanged();
        }
    }

    private async Task UnregisterToEventAsync(Guid? eventId)
    {
        if (eventId.HasValue && _userId is not null)
        {
            await DbContext.Registrations.Where(r => r.UserId == _userId && r.EventId == EventId).ExecuteDeleteAsync();
            await DbContext.SaveChangesAsync();
            _isRegistered = false;
            StateHasChanged();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();

        if (authState.User.Identity?.IsAuthenticated == true)
        {
            _userId = new Guid(authState.User.Claims.First(c => c.Type == ClaimTypes.NameIdentifier).Value);

            var user = await DbContext.UsersView.FirstOrDefaultAsync(u => u.Id == _userId);

            if (user is null || !user.IsSubscriptionActive)
            {
                CanRegister = false;
                return;
            }

            if (user.SubscriptionEndDate is not null)
            {
                var endDate = new DateTime(user.SubscriptionEndDate.Value.Year, user.SubscriptionEndDate.Value.Month, user.SubscriptionEndDate.Value.Day);

                if (Date <= endDate)
                {
                    CanRegister = true;
                }
            }
            else
            {
                switch (user.SubscriptionType)
                {
                    case SubscriptionType.MonthlyRecurring:
                    {
                        var nextMonth = DateTime.Now.AddMonths(1);
                        var endDate = new DateTime(nextMonth.Year, nextMonth.Month, user.SubscriptionStartDate!.Value.Day);

                        if (Date <= endDate)
                        {
                            CanRegister = true;
                        }

                        break;
                    }
                    case SubscriptionType.YearlyRecurring:
                    {
                        var nextYear = DateTime.Now.AddYears(1);
                        var endDate = new DateTime(nextYear.Year, nextYear.Month, user.SubscriptionStartDate!.Value.Day);

                        if (Date <= endDate)
                        {
                            CanRegister = true;
                        }

                        break;
                    }
                }
            }

            if (authState.User.Claims.Any(c => c.Type == ClaimTypes.NameIdentifier))
            {
                _isRegistered = await DbContext.Registrations.AnyAsync(r => r.UserId == _userId && r.EventId == EventId);
            }
        }
    }

}