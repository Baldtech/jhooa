@page "/Admin/Event/{id:guid?}"
@attribute [Authorize(Roles = "Admin")]
@layout AdminLayout
@using System.ComponentModel.DataAnnotations
@using Blazored.TextEditor
@using Jhooa.UI.Components.Layout
@using Jhooa.UI.Features.Events.Models
@using Jhooa.UI.Services
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Localization
@rendermode InteractiveServer
@inject IStringLocalizer<Resources.Events> Loc
@inject ApplicationDbContext DbContext
@inject NavigationManager NavigationManager
@inject IBlobService BlobService

<PageTitle>@Loc["EventsList"]</PageTitle>

<HeadContent>
    <link href="https://cdn.jsdelivr.net/npm/quill@2.0.3/dist/quill.snow.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/quill@2.0.3/dist/quill.bubble.css" rel="stylesheet">
</HeadContent>

<section class="max-w-screen-xl mx-auto w-full">
    <div>
        @if (Id.HasValue)
        {
            <h1 class="mb-8 text-4xl tracking-wider">@Loc["EditEvent"]</h1>
        }
        else
        {
            <h1 class="mb-8 text-4xl tracking-wider">@Loc["AddEvent"]</h1>
        }
        @if (Input != null)
        {
            <EditForm Model="Input" method="post" OnValidSubmit="OnValidSubmitAsync" FormName="formEvent" class=""
                      enctype="multipart/form-data" Enhance>
                <DataAnnotationsValidator/>

                @if (Id.HasValue)
                {
                    <InputText @bind-Value="Input.EventId" hidden></InputText>
                }

                <div class="bg-[#FFFFFF1A] rounded-md px-4 space-y-4 py-6 mb-6">


                    <JhooaInputText @bind-Value="Input.Title" DisplayName="@Loc["TitleFr"]"
                                    ValidationFor="@(() => Input.Title)"/>
                    <div>
                        <label for="" class="block mb-1 text-sm">@Loc["DescriptionFr"]</label>

                        <BlazoredTextEditor
                            @ref="@_richEditorDescFr"
                            ToolbarCSSClass=""
                            ToolbarCssStyle="background: lightgrey">
                            <ToolbarContent>
                                @((MarkupString)_toolbar)
                            </ToolbarContent>
                            <EditorContent>
                                @((MarkupString)_bodyFr)
                            </EditorContent>
                        </BlazoredTextEditor>

                    </div>
                    <JhooaInputText @bind-Value="Input.TitleEn" DisplayName="@Loc["TitleEn"]"
                                    ValidationFor="@(() => Input.TitleEn)"/>
                    <div>
                        <label for="" class="block mb-1 text-sm">@Loc["DescriptionEn"]</label>

                        <BlazoredTextEditor
                            @ref="@_richEditorDescEn"
                            ToolbarCSSClass=""
                            ToolbarCssStyle="background: lightgrey">
                            <ToolbarContent>
                                @((MarkupString)_toolbar)
                            </ToolbarContent>
                            <EditorContent>
                                @((MarkupString)_bodyEn)
                            </EditorContent>
                        </BlazoredTextEditor>

                    </div>
                    <JhooaInputDate @bind-Value="Input.StartDate" DisplayName="@Loc["StartDate"]"
                                    ValidationFor="@(() => Input.StartDate)"/>
                    <JhooaInputDate @bind-Value="Input.EndDate" DisplayName="@Loc["EndDate"]"
                                    ValidationFor="@(() => Input.EndDate)"/>


                    <InputFile OnChange="HandleFileSelected" accept=".jpg,.png,jpeg"/>
                    <InputText @bind-Value="Input.ImageName" hidden></InputText>

                    <label class="flex items-center space-x-2 cursor-pointer">

                        <InputCheckbox @bind-Value="Input.IsPublished"
                                       type="checkbox"
                                       class="h-5 w-5 border border-white rounded-sm bg-transparent checked:bg-transparent focus:border-0 active:border-0
                  "
                        />
                        <span>@Loc["IsPublished"]</span>
                    </label>
                </div>
                <button type="submit"
                        class="px-8 py-3 text-sm bg-teal-500 rounded-3xl font-amsiProLight">@Loc["Save"]</button>
                <JhooaAdminActionButton
                    Url="/Admin/Events"
                    Text="@Loc["Cancel"]"
                />

            </EditForm>
        }
    </div>
</section>

<script src="https://cdn.jsdelivr.net/npm/quill@2.0.3/dist/quill.js"></script>
<script src="_content/Blazored.TextEditor/quill-blot-formatter.min.js"></script>
<script src="_content/Blazored.TextEditor/Blazored-BlazorQuill.js"></script>


@code {

    BlazoredTextEditor _richEditorDescFr = null!;
    BlazoredTextEditor _richEditorDescEn = null!;
    string _toolbar = """...markup here...""";
    string _bodyFr = """...markup here...""";
    string _bodyEn = """...markup here...""";

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        if (Input is null) return;
        
        foreach (var file in e.GetMultipleFiles())
        {
            var ext = Path.GetExtension(file.Name);
            var blobService = BlobService.GetBlobService("events");
            Input.ImageName = await blobService.UploadAsync($"thumbnails/{Guid.NewGuid()}{ext}", file.OpenReadStream());
        }
    }

    [Parameter] public Guid? Id { get; set; }
    [SupplyParameterFromForm] private InputModel? Input { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        _toolbar = """"
                  <select class="ql-header">
                      <option selected=""></option>
                      <option value="1"></option>
                      <option value="2"></option>
                      <option value="3"></option>
                      <option value="4"></option>
                      <option value="5"></option>
                  </select>
                  <span class="ql-formats">
                      <button class="ql-bold"></button>
                      <button class="ql-italic"></button>
                      <button class="ql-underline"></button>
                      <button class="ql-strike"></button>
                  </span>
                  <span class="ql-formats">
                      <button class="ql-list" value="ordered"></button>
                      <button class="ql-list" value="bullet"></button>
                  </span>
                  """";

        _bodyFr = "";
        _bodyEn = "";

        if (Id.HasValue)
        {
            var ev = await DbContext.Events.FirstOrDefaultAsync(e => e.Id == Id.Value);
            if (ev is not null)
            {
                Input ??= new InputModel()
                {
                    EventId = ev.Id.ToString(),
                    Title = ev.Title,
                    StartDate = ev.StartDate,
                    EndDate = ev.EndDate,
                    TitleEn = ev.TitleEn,
                    IsPublished = ev.IsPublished
                };

                _bodyFr = ev.Description;
                _bodyEn = ev.DescriptionEn;
            }
        }
        else
            Input ??= new InputModel()
            {
                Title = "",
                StartDate = DateTime.Now.AddDays(5),
                EndDate = DateTime.Now.AddDays(10)
            };
    }

    private async Task OnValidSubmitAsync()
    {
        if (Input is not null)
        {
            var contentFr = await _richEditorDescFr.GetHTML();
            var contentEn = await _richEditorDescEn.GetHTML();

            if (Input.EventGuid.HasValue)
            {
                if (Input.ImageName is not null)
                {
                    await DbContext.Events.Where(e => e.Id == Input.EventGuid)
                        .ExecuteUpdateAsync(setters => setters
                            .SetProperty(b => b.ImageUrl, Input.ImageName));
                }

                await DbContext.Events.Where(e => e.Id == Input.EventGuid)
                    .ExecuteUpdateAsync(setters => setters
                        .SetProperty(b => b.Title, Input.Title)
                        .SetProperty(b => b.TitleEn, Input.TitleEn)
                        .SetProperty(b => b.Description, contentFr!)
                        .SetProperty(b => b.DescriptionEn, contentEn!)
                        .SetProperty(b => b.StartDate, Input.StartDate)
                        .SetProperty(b => b.IsPublished, Input.IsPublished)
                        .SetProperty(b => b.EndDate, Input.EndDate));
            }
            else
            {
                var newEvent = new Event()
                {
                    Title = Input.Title,
                    Description = contentFr,
                    StartDate = Input.StartDate,
                    EndDate = Input.EndDate,
                    TitleEn = Input.TitleEn,
                    DescriptionEn = contentEn,
                    ImageUrl = Input.ImageName,
                    IsPublished = Input.IsPublished
                };

                await DbContext.Events.AddAsync(newEvent);
            }

            await DbContext.SaveChangesAsync();
        }

        NavigationManager.NavigateTo($"/Admin/Events");
    }

    private sealed class InputModel
    {
        public string? EventId { get; set; }
        public Guid? EventGuid => EventId is not null ? Guid.Parse(EventId) : null;

        [Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Resources.Events))]
        [StringLength(maximumLength: 100, MinimumLength = 3, ErrorMessageResourceName = "FieldLength", ErrorMessageResourceType = typeof(Resources.Events))]
        public string Title { get; set; } = "";

        [Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Resources.Events))]
        [StringLength(maximumLength: 100, MinimumLength = 3, ErrorMessageResourceName = "FieldLength", ErrorMessageResourceType = typeof(Resources.Events))]
        public string TitleEn { get; set; } = "";

        public DateTimeOffset StartDate { get; set; }

        public DateTimeOffset EndDate { get; set; }

        public string? ImageName { get; set; }
        public bool IsPublished { get; set; }
    }

}