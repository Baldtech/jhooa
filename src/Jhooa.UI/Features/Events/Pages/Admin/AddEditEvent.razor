@page "/Admin/Event/{id:guid?}"
@attribute [Authorize(Roles = "Admin")]
@layout AdminLayout

@using System.ComponentModel.DataAnnotations
@using Jhooa.UI.Components.Layout
@using Jhooa.UI.Features.Events.Models
@using Jhooa.UI.Services
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Localization

@inject IStringLocalizer<Resources.Events> Loc
@inject ApplicationDbContext DbContext
@inject NavigationManager NavigationManager
@inject IBlobService BlobService

<PageTitle>@Loc["EventsList"]</PageTitle>

<section class="max-w-screen-xl mx-auto w-full">
    <div>
        @if (Id.HasValue)
        {
            <h1 class="mb-8 text-4xl tracking-wider">@Loc["EditEvent"]</h1>
        }
        else
        {
            <h1 class="mb-8 text-4xl tracking-wider">@Loc["AddEvent"]</h1>
        }
        @if (Input != null)
        {
            <EditForm Model="Input" method="post" OnValidSubmit="OnValidSubmitAsync" FormName="formEvent" class=""
                      enctype="multipart/form-data" Enhance>
                <DataAnnotationsValidator/>

                @if (Id.HasValue)
                {
                    <InputText @bind-Value="Input.EventId" hidden></InputText>
                }

                <div class="bg-[#FFFFFF1A] rounded-md px-4 py-6 space-y-6 mb-6">


                    <JhooaInputText @bind-Value="Input.Title" DisplayName="@Loc["TitleFr"]"
                                    ValidationFor="@(() => Input.Title)"/>
                    <JhooaInputText @bind-Value="Input.Description" DisplayName="@Loc["DescriptionFr"]"
                                    ValidationFor="@(() => Input.Description)"/>
                    <JhooaInputText @bind-Value="Input.TitleEn" DisplayName="@Loc["TitleEn"]"
                                    ValidationFor="@(() => Input.TitleEn)"/>
                    <JhooaInputText @bind-Value="Input.DescriptionEn" DisplayName="@Loc["DescriptionEn"]"
                                    ValidationFor="@(() => Input.DescriptionEn)"/>
                    <JhooaInputDate @bind-Value="Input.StartDate" DisplayName="@Loc["StartDate"]"
                                    ValidationFor="@(() => Input.StartDate)"/>
                    <JhooaInputDate @bind-Value="Input.EndDate" DisplayName="@Loc["EndDate"]"
                                    ValidationFor="@(() => Input.EndDate)"/>

                    @if (!Id.HasValue)
                    {
                        <InputFile name="Input.Image"/>
                    }
                </div>
                <button type="submit"
                        class="px-8 py-3 text-sm bg-teal-500 rounded-3xl font-amsiProLight">@Loc["Save"]</button>
                <JhooaAdminActionButton
                    Url="/Admin/Events"
                    Text="@Loc["Cancel"]"
                />

            </EditForm>
        }
    </div>
</section>



@code {
    [Parameter] public Guid? Id { get; set; }

    [SupplyParameterFromForm] private InputModel? Input { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (Id.HasValue)
        {
            var ev = await DbContext.Events.FirstOrDefaultAsync(e => e.Id == Id.Value);
            if (ev is not null)
            {
                Input ??= new InputModel()
                {
                    EventId = ev.Id.ToString(),
                    Title = ev.Title,
                    Description = ev.Description,
                    StartDate = ev.StartDate,
                    EndDate = ev.EndDate
                };
            }
        }
        else
            Input ??= new InputModel()
            {
                Title = "",
                Description = "",
                StartDate = DateTime.Now.AddDays(5),
                EndDate = DateTime.Now.AddDays(10)
            };
    }

    private async Task OnValidSubmitAsync()
    {
        if (Input is not null)
        {
            if (Input.EventGuid.HasValue)
            {
                await DbContext.Events.Where(e => e.Id == Input.EventGuid)
                    .ExecuteUpdateAsync(setters => setters
                        .SetProperty(b => b.Title, Input.Title)
                        .SetProperty(b => b.TitleEn, Input.TitleEn)
                        .SetProperty(b => b.Description, Input.Description)
                        .SetProperty(b => b.DescriptionEn, Input.DescriptionEn)
                        .SetProperty(b => b.StartDate, Input.StartDate)
                        .SetProperty(b => b.EndDate, Input.EndDate));
            }
            else
            {
                var newEvent = new Event()
                {
                    Title = Input.Title,
                    Description = Input.Description,
                    StartDate = Input.StartDate,
                    EndDate = Input.EndDate,
                    TitleEn = Input.TitleEn,
                    DescriptionEn = Input.DescriptionEn
                };

                if (Input.Image is not null)
                {
                    var blobService = BlobService.GetBlobService("events");
                    newEvent.ImageUrl = await blobService.UploadAsync($"{newEvent.Id}/{Input.Image.FileName}", Input.Image.OpenReadStream());
                }

                await DbContext.Events.AddAsync(newEvent);
            }

            await DbContext.SaveChangesAsync();
        }

        NavigationManager.NavigateTo($"/Admin/Events");
    }

    private sealed class InputModel
    {
        public string? EventId { get; set; }
        public Guid? EventGuid => EventId is not null ? Guid.Parse(EventId) : null;

        [Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Resources.Events))]
        [StringLength(maximumLength: 100, MinimumLength = 3, ErrorMessageResourceName = "FieldLength", ErrorMessageResourceType = typeof(Resources.Events))]
        public string Title { get; set; } = "";

        [Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Resources.Events))]
        [StringLength(maximumLength: 2000, MinimumLength = 3, ErrorMessageResourceName = "FieldLength", ErrorMessageResourceType = typeof(Resources.Events))]
        public string Description { get; set; } = "";

        [Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Resources.Events))]
        [StringLength(maximumLength: 100, MinimumLength = 3, ErrorMessageResourceName = "FieldLength", ErrorMessageResourceType = typeof(Resources.Events))]
        public string TitleEn { get; set; } = "";

        [Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Resources.Events))]
        [StringLength(maximumLength: 2000, MinimumLength = 3, ErrorMessageResourceName = "FieldLength", ErrorMessageResourceType = typeof(Resources.Events))]
        public string DescriptionEn { get; set; } = "";

        public DateTimeOffset StartDate { get; set; }

        public DateTimeOffset EndDate { get; set; }

        public IFormFile? Image { get; set; }
    }

}