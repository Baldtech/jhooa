@using Jhooa.UI.Features.Identity.Models
@using Jhooa.UI.Features.Subscriptions.Models
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Localization

@inject ApplicationDbContext DbContext
@inject IStringLocalizer<Jhooa.UI.Resources.Shared> Loc

<PaginationComponent TItem="UserView" Items="_users" DefaultPageSize="15">
    <ChildContentHeader>
        <tr>
            <th>@Loc["EmailAddress"]</th>
            <th>@Loc["FirstName"]</th>
            <th>@Loc["LastName"]</th>
            <th>@Loc["Type"]</th>
            <th>@Loc["Admin"]</th>
            <th>@Loc["Actions"]</th>
        </tr>
    </ChildContentHeader>
    <ChildContentRow Context="user">
        <tr class="even:bg-jhooa-table-even odd:bg-jhooa-table-odd">
            <td>@user.Email</td>
            <td>@user.FirstName</td>
            <td>@user.LastName</td>
            <td>@user.SubType</td>
            <td>@(user.IsAdmin ? Loc["Yes"] : Loc["No"])</td>
            <td>
                <a class="px-6 py-1 text-sm bg-jhooa-peach-100 rounded-3xl font-amsiProLight" href="/Admin/Users/@user.Id">@Loc["Details"]</a>
            </td>
        </tr>
    </ChildContentRow>
</PaginationComponent>

@code {
    private List<UserView> _users = [];
    [Parameter] public EventCallback<int?> NbUsersCallback { get; set; }
    [Parameter] public FilterTypes? SelectedFilter { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _users = await DbContext.UsersView.ToListAsync();
        //await NbUsersCallback.InvokeAsync(_users.Count);
    }
    
    
    protected override async Task OnParametersSetAsync()
    {
        switch (SelectedFilter)
        {
            case FilterTypes.All:
                _users = await DbContext.UsersView.ToListAsync();
                break;
            case FilterTypes.Admin:
                _users = await DbContext.UsersView.Where(u => u.IsAdmin).ToListAsync();
                break;
            case FilterTypes.Active:
                _users = await DbContext.UsersView.Where(u => u.IsSubscriptionActive && u.SubscriptionStatus == SubscriptionStatus.Paid).ToListAsync();
                break;
            case FilterTypes.Inactive:
                _users = await DbContext.UsersView.Where(u => !u.IsSubscriptionActive).ToListAsync();
                break;
            default:
                _users = await DbContext.UsersView.ToListAsync();
                break;
        }
        
        // _users = await DbContext.Users.Where(u => u.ActivatedAt != null).Include(i => i.Subscriptions).ToListAsync();
        //await NbUsersCallback.InvokeAsync(_users.Count);
    }

}