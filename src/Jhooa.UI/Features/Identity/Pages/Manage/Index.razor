@page "/Account/Manage"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using Jhooa.UI.Features.Identity.Models
@using Microsoft.Extensions.Localization
@using Jhooa.UI.Features.Identity.Components
@using Microsoft.EntityFrameworkCore
@layout ManageLayout
@inject IStringLocalizer<Resources.Identity> Loc
@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ApplicationDbContext DbContext

<PageTitle>@Loc["MyAccount"]</PageTitle>


<section class="max-w-screen-xl mx-auto  text-white px-4 ">

    <h2 class="text-2xl font-semibold mb-4 font-monetaRegular ">@Loc["MyAccount"]</h2>

    @if (Input is not null)
    {
        <EditForm Model="Input" method="post" OnValidSubmit="OnValidSubmitAsync" FormName="login" class="">
            <StatusMessage/>
            <DataAnnotationsValidator/>

            <div class="flex flex-col md:flex-row md:space-x-4">
                <div class="space-y-3 w-full md:w-1/2 pt-4">
                    <JhooaInputText @bind-Value="Input.Lastname" DisplayName="@Loc["LastName"]"
                                    ValidationFor="@(() => Input.Lastname)" Autocomplete="lastname"/>
                    <JhooaInputText @bind-Value="Input.Firstname" DisplayName="@Loc["FirstName"]"
                                    ValidationFor="@(() => Input.Firstname)" Autocomplete="firstname"/>

                    <JhooaInputText @bind-Value="Input.PhoneNumber" DisplayName="@Loc["PhoneNumber"]"
                                    ValidationFor="@(() => Input.PhoneNumber)" Autocomplete="phone"/>
                    <JhooaInputDate @bind-Value="Input.BirthDate" DisplayName="@Loc["BirthDate"]"
                                    ValidationFor="@(() => Input.BirthDate)"/>
                </div>

                <div class="space-y-3 w-full md:w-1/2 pt-4">

                    <JhooaInputText @bind-Value="Input.Address" DisplayName="@Loc["Address"]"
                                    ValidationFor="@(() => Input.Address)" Autocomplete="address"/>
                    <JhooaInputText @bind-Value="Input.ZipCode" DisplayName="@Loc["ZipCode"]"
                                    ValidationFor="@(() => Input.ZipCode)" Autocomplete="zipcode"/>
                    <JhooaInputText @bind-Value="Input.City" DisplayName="@Loc["City"]"
                                    ValidationFor="@(() => Input.City)" Autocomplete="city"/>
                    <div>
                        <label for="@Input.Country" class="block mb-2 text-sm">@Loc["Country"]</label>

                        <InputSelect @bind-Value="Input.Country"
                                     class="w-full border-2 border-white bg-transparent text-white placeholder-gray-300 px-3 py-3 focus:outline-none">
                            <option class="text-jhooa-teal-600" value="france">@Loc["France"]</option>
                            <option class="text-jhooa-teal-600" value="luxembourg">@Loc["Luxembourg"]</option>
                            <option class="text-jhooa-teal-600" value="belgium">@Loc["Belgium"]</option>
                        </InputSelect>
                        <ValidationMessage For="@(() => Input.Country)" class="text-danger"/>

                    </div>
                    <div class="flex  space-x-2 mb-8  text-sm">
                        <InputCheckbox @bind-Value="Input.SubscribeToNewsletter"
                                       class="w-5 h-5 mt-1 text-jhooa-brick-500 bg-transparent border-gray-300 rounded-sm focus:ring-0 mr-4"/>
                        <label for="subscribetonewsletter" class="">@Loc["SubscribeToNewsletter"]</label>
                    </div>

                    <div class="flex space-x-2 mb-8  text-sm">
                        <InputCheckbox @bind-Value="Input.AcceptDistribution"
                                       class="w-5 h-5 mt-1 text-jhooa-brick-500 bg-transparent border-gray-300 rounded-sm focus:ring-0 mr-4"/>
                        <label for="acceptdistribution"
                               class="">@Loc["AcceptDiffusion"] <br/>@Loc["AcceptDiffusionDesc"]</label>
                    </div>
                </div>
            </div>
            <div class="flex flex-col space-y-4 items-center mb-10 mt-4">
                <button type="submit" class="border-2 border-white px-10 py-3">@Loc["SaveChanges"]</button>
                <a href="/Account/Manage/ChangePassword">@Loc["ChangePassword"]</a>
            </div>
        </EditForm>
    }
</section>

<script src="js/mobileMenu.js"></script>


@code {
    private ApplicationUser _user = default!;
    private string? _phoneNumber;

    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm] private InputModel? Input { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        _phoneNumber = await UserManager.GetPhoneNumberAsync(_user);

        Input ??= new InputModel()
        {
            Firstname = _user.FirstName,
            Lastname = _user.LastName,
            Address = _user.Address,
            Country = _user.Country,
            ZipCode = _user.ZipCode,
            City = _user.City,
            PhoneNumber = _phoneNumber!,
            SubscribeToNewsletter = _user.NewsletterActive,
            BirthDate = _user.BirthDate,
            AcceptDistribution = _user.AcceptDistribution
        };
    }

    private async Task OnValidSubmitAsync()
    {
        if (Input is not null)
        {
            if (Input.PhoneNumber != _phoneNumber)
            {
                var setPhoneResult = await UserManager.SetPhoneNumberAsync(_user, Input.PhoneNumber);
                if (!setPhoneResult.Succeeded)
                {
                    RedirectManager.RedirectToCurrentPageWithStatus("Error: Failed to set phone number.", HttpContext);
                }
            }

            await DbContext.Users.Where(u => u.Id == _user.Id)
                .ExecuteUpdateAsync(setters =>
                    setters.SetProperty(s => s.FirstName, Input.Firstname)
                        .SetProperty(s => s.LastName, Input.Lastname)
                        .SetProperty(s => s.Address, Input.Address)
                        .SetProperty(s => s.ZipCode, Input.ZipCode)
                        .SetProperty(s => s.Country, Input.Country)
                        .SetProperty(s => s.City, Input.City)
                        .SetProperty(s => s.AcceptDistribution, Input.AcceptDistribution)
                        .SetProperty(s => s.BirthDate, Input.BirthDate)
                        .SetProperty(s => s.NewsletterActive, Input.SubscribeToNewsletter));

            await DbContext.SaveChangesAsync();


            await SignInManager.RefreshSignInAsync(_user);
            RedirectManager.RedirectToCurrentPageWithStatus("Your profile has been updated", HttpContext);
        }
    }

    private sealed class InputModel
    {
        [Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Resources.Identity))]
        [StringLength(maximumLength: 100, MinimumLength = 3, ErrorMessageResourceName = "FieldLength", ErrorMessageResourceType = typeof(Resources.Identity))]
        public required string Firstname { get; set; }

        [Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Resources.Identity))]
        [StringLength(maximumLength: 100, MinimumLength = 3, ErrorMessageResourceName = "FieldLength", ErrorMessageResourceType = typeof(Resources.Identity))]
        public required string Lastname { get; set; }

        [Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Resources.Identity))]
        [StringLength(maximumLength: 100, MinimumLength = 3, ErrorMessageResourceName = "FieldLength", ErrorMessageResourceType = typeof(Resources.Identity))]
        public required string Address { get; set; }

        [Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Resources.Identity))]
        [StringLength(maximumLength: 100, MinimumLength = 3, ErrorMessageResourceName = "FieldLength", ErrorMessageResourceType = typeof(Resources.Identity))]
        public required string ZipCode { get; set; }

        [Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Resources.Identity))]
        [StringLength(maximumLength: 100, MinimumLength = 3, ErrorMessageResourceName = "FieldLength", ErrorMessageResourceType = typeof(Resources.Identity))]
        public string City { get; set; } = "";

        [Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Resources.Identity))]
        [StringLength(maximumLength: 100, MinimumLength = 3, ErrorMessageResourceName = "FieldLength", ErrorMessageResourceType = typeof(Resources.Identity))]
        public required string Country { get; set; }

        [Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Resources.Identity))]
        [StringLength(maximumLength: 100, MinimumLength = 3, ErrorMessageResourceName = "FieldLength", ErrorMessageResourceType = typeof(Resources.Identity))]
        public required string PhoneNumber { get; set; }

        [Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Resources.Identity))]
        public DateTimeOffset BirthDate { get; set; } = DateTimeOffset.Now;

        public bool SubscribeToNewsletter { get; set; }
        public bool AcceptDistribution { get; set; }
    }

}
