@page "/Account/Manage/ChangePassword"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using Jhooa.UI.Features.Identity.Models
@using Microsoft.Extensions.Localization
@using Jhooa.UI.Features.Identity.Components

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ILogger<ChangePassword> Logger
@inject IStringLocalizer<Resources.Identity> Loc

<PageTitle>@Loc["ChangePassword"]</PageTitle>

<ManageNavMenu/>

<section class="max-w-screen-xl mx-auto text-white">
    <h3>@Loc["ChangePassword"]</h3>

    <StatusMessage Message="@_message"/>

    <div class="grid grid-cols-1 gap-4">
        <div class="">
            <EditForm Model="Input" FormName="change-password" OnValidSubmit="OnValidSubmitAsync" method="post">
                <DataAnnotationsValidator/>
                <ValidationSummary class="text-danger" role="alert"/>

                <JhooaInputText @bind-Value="Input.OldPassword" DisplayName="@Loc["OldPassword"]"
                                ValidationFor="@(() => Input.OldPassword)" Autocomplete="" Type="password"/>
                <JhooaInputText @bind-Value="Input.NewPassword" DisplayName="@Loc["NewPassword"]"
                                ValidationFor="@(() => Input.NewPassword)" Autocomplete="" Type="password"/>
                <JhooaInputText @bind-Value="Input.ConfirmPassword" DisplayName="@Loc["ConfirmNewPassword"]"
                                ValidationFor="@(() => Input.ConfirmPassword)" Type="password"/>

                <button type="submit" class="border-2 border-white p-3 bg-gray-400">@Loc["UpdatePassword"]</button>

            </EditForm>
        </div>
    </div>
</section>


@code {
    private string? _message;
    private ApplicationUser _user = default!;
    private bool _hasPassword;

    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        _user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        _hasPassword = await UserManager.HasPasswordAsync(_user);
        if (!_hasPassword)
        {
            RedirectManager.RedirectTo("Account/Manage/SetPassword");
        }
    }

    private async Task OnValidSubmitAsync()
    {
        var changePasswordResult = await UserManager.ChangePasswordAsync(_user, Input.OldPassword, Input.NewPassword);
        if (!changePasswordResult.Succeeded)
        {
            _message = $"{Loc["Error"]}: {string.Join(",", changePasswordResult.Errors.Select(error => error.Description))}";
            return;
        }

        await SignInManager.RefreshSignInAsync(_user);
        Logger.LogInformation("User changed their password successfully.");

        RedirectManager.RedirectToCurrentPageWithStatus(Loc["PasswordChanged"], HttpContext);
    }

    private sealed class InputModel
    {
        [Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Resources.Identity))]
        [StringLength(maximumLength: 100, MinimumLength = 6, ErrorMessageResourceName = "FieldLength", ErrorMessageResourceType = typeof(Resources.Identity))]
        [DataType(DataType.Password)]
        public string OldPassword { get; set; } = "";

        
        [Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Resources.Identity))]
        [StringLength(maximumLength: 100, MinimumLength = 6, ErrorMessageResourceName = "FieldLength", ErrorMessageResourceType = typeof(Resources.Identity))]
        [DataType(DataType.Password)]
        public string NewPassword { get; set; } = "";

        [Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Resources.Identity))]
        [DataType(DataType.Password)]
        [Compare("NewPassword", ErrorMessageResourceName = "PasswordNotMatching", ErrorMessageResourceType = typeof(Resources.Identity))]
        public string ConfirmPassword { get; set; } = "";
    }

}
