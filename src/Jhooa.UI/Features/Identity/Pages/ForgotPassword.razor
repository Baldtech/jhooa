@page "/Account/ForgotPassword"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Jhooa.UI.Features.Identity.Models
@using Microsoft.Extensions.Localization
@using Jhooa.UI.Features.Identity.Components

@inject IStringLocalizer<Resources.Identity> Loc
@inject UserManager<ApplicationUser> UserManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>@Loc["ForgotPassword"]</PageTitle>

<section class="max-w-screen-xl mx-auto grid grid-cols-2 gap-4 text-white">
    <div>
        <h3 class="mb-8">@Loc["CreateAccount"]</h3>
        <JhooaButtonLink Text="@Loc["CreateAccount"]" Url="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { }))" />
    </div>
    <div>
        <h3>@Loc["ForgotPassword"]</h3>
        <EditForm Model="Input" method="post" OnValidSubmit="OnValidSubmitAsync" FormName="forgot-password" class="space-y-6">
            <DataAnnotationsValidator/>

            <JhooaInputText @bind-Value="Input.Email" DisplayName="@Loc["EmailAddress"]" ValidationFor="@(() => Input.Email)" />
            
            <button type="submit" class="border-2 border-white p-3 float-right bg-gray-400">@Loc["ResetPassword"]</button>
        </EditForm>
    </div>
</section>

@code {
    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    private async Task OnValidSubmitAsync()
    {
        var user = await UserManager.FindByEmailAsync(Input.Email);
        if (user is null || !await UserManager.IsEmailConfirmedAsync(user))
        {
            RedirectManager.RedirectTo("Account/ForgotPasswordConfirmation");
        }
        
        var code = await UserManager.GeneratePasswordResetTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ResetPassword").AbsoluteUri,
            new Dictionary<string, object?> { ["code"] = code });

        await EmailSender.SendPasswordResetLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        RedirectManager.RedirectTo("Account/ForgotPasswordConfirmation");
    }

    private sealed class InputModel
    {
        [Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Resources.Identity))] 
        [EmailAddress(ErrorMessageResourceName = "EmailInvalid", ErrorMessageResourceType = typeof(Resources.Identity))]
        public string Email { get; set; } = "";
    }
}
