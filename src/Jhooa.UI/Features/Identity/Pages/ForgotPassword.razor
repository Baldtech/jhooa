@page "/Account/ForgotPassword"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Jhooa.UI.Features.Identity.Models
@using Microsoft.Extensions.Localization
@inject IStringLocalizer<Resources.Identity> Loc
@inject UserManager<ApplicationUser> UserManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Forgot your password?</PageTitle>

<section class="max-w-screen-xl mx-auto grid grid-cols-2 gap-4 text-white">
    <div>
        <h3>@Loc["CreateAccount"]</h3>
        <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { }))">@Loc["CreateAccount"]</a>
    </div>
    <div>
        <h3>@Loc["ForgotPassword"]</h3>
        <EditForm Model="Input" method="post" OnValidSubmit="OnValidSubmitAsync" FormName="forgot-password" class="space-y-6">
            <DataAnnotationsValidator/>
            <ValidationSummary class="text-danger" role="alert"/>

            <label for="email" class="block text-sm font-medium ">@Loc["FormEmail"]</label>
            <InputText @bind-Value="Input.Email"
                       class="mt-1 block w-full border-2 border-white shadow-sm bg-transparent p-3 focus:outline-none"
                       autocomplete="username" aria-required="true"/>
            <ValidationMessage For="() => Input.Email" class="text-danger"/>
            
            <button type="submit" class="border-2 border-white p-3 float-right bg-gray-400">@Loc["ResetPassword"]</button>
        </EditForm>
    </div>
</section>

@code {
    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    private async Task OnValidSubmitAsync()
    {
        var user = await UserManager.FindByEmailAsync(Input.Email);
        if (user is null || !(await UserManager.IsEmailConfirmedAsync(user)))
        {
            // Don't reveal that the user does not exist or is not confirmed
            RedirectManager.RedirectTo("Account/ForgotPasswordConfirmation");
        }

        // For more information on how to enable account confirmation and password reset please
        // visit https://go.microsoft.com/fwlink/?LinkID=532713
        var code = await UserManager.GeneratePasswordResetTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ResetPassword").AbsoluteUri,
            new Dictionary<string, object?> { ["code"] = code });

        await EmailSender.SendPasswordResetLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        RedirectManager.RedirectTo("Account/ForgotPasswordConfirmation");
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";
    }
}
