@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using Jhooa.UI.Configuration
@using Jhooa.UI.Features.Companies.Models
@using Jhooa.UI.Features.Dreams.Models
@using Microsoft.AspNetCore.Identity
@using Jhooa.UI.Features.Identity.Models
@using Jhooa.UI.Features.Subscriptions.Models
@using Jhooa.UI.Services
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Localization
@using Jhooa.UI.Features.Identity.Components
@using Microsoft.Extensions.Options

@inject IStringLocalizer<Jhooa.UI.Resources.Shared> LocShared
@inject IStringLocalizer<Resources.Identity> Loc
@inject IStringLocalizer<Jhooa.UI.Features.Home.Resources.Home> LocHome
@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IStripeService StripeService
@inject ApplicationDbContext DbContext
@inject IOptions<FeatureFlags> FeatureFlagsConfig
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IdentityRedirectManager RedirectManager

<PageTitle>@LocShared["TitleRegister"]</PageTitle>

<div class="max-w-screen-xl mx-auto  text-white py-4">
    <EditForm Model="Input" method="post" OnValidSubmit="RegisterUser" FormName="login" class="space-y-6">
        <DataAnnotationsValidator/>
        <div class="container mx-auto py-8 px-4">

            @if(Message is not null)
            {            
                <p class="mb-10 max-w-screen-md mx-auto text-center text-sm tracking-wide font-amsiProRegular">@Loc["RegisterIntro"]</p>
                <div class="mb-10 max-w-screen-sm mx-auto text-center text-sm tracking-wide font-amsiProRegular"> <StatusMessage Message="@Message"/></div>
            }
            else
            {
                <p class="mb-20 max-w-screen-md mx-auto text-center text-sm tracking-wide font-amsiProRegular">@Loc["RegisterIntro"]</p>
            }
            
            <div class="grid grid-cols-1 lg:grid-cols-3 gap-8 mt-4">
                <!-- COL 1: CRÉER UN COMPTE -->
                <section class="border-b lg:border-b-0 lg:border-r border-white pb-8 lg:pb-0 pr-0 lg:pr-8">

                    <div class="flex items-center mb-6">
                        <div
                            class="flex items-center justify-center w-8 h-8 border bg-white border-white rounded-full mr-3 text-jhooa-teal-200 text-xl font-monetaBold">
                            <span>1</span>
                        </div>
                        <h2 class="text-3xl font-monetaRegular">@Loc["CreateAccount"]</h2>
                    </div>

                    <div class="space-y-3">

                        <JhooaInputText @bind-Value="Input.Lastname" DisplayName="@Loc["LastName"]"
                                        ValidationFor="@(() => Input.Lastname)" Autocomplete="lastname"/>
                        <JhooaInputText @bind-Value="Input.Firstname" DisplayName="@Loc["FirstName"]"
                                        ValidationFor="@(() => Input.Firstname)" Autocomplete="firstname"/>
                        <JhooaInputText @bind-Value="Input.Email" DisplayName="@Loc["EmailAddress"]"
                                        ValidationFor="@(() => Input.Email)" Autocomplete="username"/>
                        <JhooaInputDate @bind-Value="Input.BirthDate" DisplayName="@Loc["BirthDate"]"
                                        ValidationFor="@(() => Input.BirthDate)"/>

                        <JhooaInputText @bind-Value="Input.Address" DisplayName="@Loc["Address"]"
                                        ValidationFor="@(() => Input.Address)" Autocomplete="address"/>
                        <JhooaInputText @bind-Value="Input.ZipCode" DisplayName="@Loc["ZipCode"]"
                                        ValidationFor="@(() => Input.ZipCode)" Autocomplete="zipcode"/>
                        <JhooaInputText @bind-Value="Input.City" DisplayName="@Loc["City"]"
                                        ValidationFor="@(() => Input.City)" Autocomplete="city"/>
                        <div>
                            <label for="@Input.Country" class="block mb-2 text-sm">@Loc["Country"]</label>

                            <InputSelect @bind-Value="Input.Country"
                                         class="w-full border-2 border-white bg-transparent text-white placeholder-gray-300 px-3 py-3 focus:outline-none">
                                <option class="text-jhooa-teal-600" value="france">@Loc["France"]</option>
                                <option class="text-jhooa-teal-600" value="luxembourg">@Loc["Luxembourg"]</option>
                                <option class="text-jhooa-teal-600" value="belgium">@Loc["Belgium"]</option>
                            </InputSelect>
                            <ValidationMessage For="@(() => Input.Country)" class="text-danger"/>

                        </div>
                        <JhooaInputText @bind-Value="Input.PhoneNumber" DisplayName="@Loc["PhoneNumber"]"
                                        ValidationFor="@(() => Input.PhoneNumber)" Autocomplete="phone"/>
                        <JhooaInputText @bind-Value="Input.Password" DisplayName="@Loc["Password"]"
                                        ValidationFor="@(() => Input.Password)" Autocomplete="" Type="password"/>
                        <JhooaInputText @bind-Value="Input.ConfirmPassword" DisplayName="@Loc["ConfirmPassword"]"
                                        ValidationFor="@(() => Input.ConfirmPassword)" Type="password"/>

                    </div>
                </section>
                <section class="border-b lg:border-b-0 lg:border-r border-white pb-8 lg:pb-0 pr-0 lg:pr-8">
                    <div class="flex items-center mb-6 mt-8 lg:mt-0">
                        <div
                            class="flex items-center justify-center w-8 h-8 border bg-white border-white rounded-full mr-3 text-jhooa-teal-200 text-xl font-monetaBold">
                            <span>2</span>
                        </div>
                        <h2 class="text-3xl font-monetaRegular">@Loc["RegisterMyWishes"]</h2>
                    </div>
                    <h3 class="text-lg font-amsiSemiBold mb-2 tracking-wide">@Loc["RegisterDreamSubTitle"]</h3>
                    <p class="text-sm font-amsiProRegular mb-6 tracking-wide">@Loc["RegisterDreamDescription"]</p>
                    <div class="space-y-3 text-center">

                        <JhooaDreamInput DisplayName="@Loc["FormSmallDream"]"
                                         Id="@(Constants.DreamIds.SmallDreamId)"
                                         Content="@Loc["SmallDreamPlaceholder"]"
                                         DreamType="DreamTypes.Small"/>
                        <ValidationMessage For="@(() => Input.SmallDream)" class="text-danger"/>
                        <JhooaDreamInput DisplayName="@Loc["FormMediumDream"]"
                                         Id="@(Constants.DreamIds.MediumDreamId)"
                                         Content="@Loc["MediumDreamPlaceholder"]"
                                         DreamType="DreamTypes.Medium"/>
                        <ValidationMessage For="@(() => Input.MediumDream)" class="text-danger"/>
                        <JhooaDreamInput DisplayName="@Loc["FormBigDream"]"
                                         Id="@(Constants.DreamIds.BigDreamId)"
                                         Content="@Loc["BigDreamPlaceholder"]"
                                         DreamType="DreamTypes.Big"/>
                        <ValidationMessage For="@(() => Input.BigDream)" class="text-danger"/>

                        <input type="hidden" name="Input.SmallDream" @bind-value="Input.SmallDream"
                               id="small-dreams-hidden"/>
                        <input type="hidden" name="Input.MediumDream" @bind-value="Input.MediumDream"
                               id="medium-dreams-hidden"/>
                        <input type="hidden" name="Input.BigDream" @bind-value="Input.BigDream" id="big-dreams-hidden"/>

                        <InputDreams SmallDream="@Input.SmallDream" MediumDream="@Input.MediumDream" BigDream="@Input.BigDream"/>
                    </div>
                </section>
                <section class="pb-8 lg:pb-0">
                    <div class="flex items-center mb-6 mt-8 lg:mt-0">
                        <div
                            class="flex items-center justify-center w-8 h-8 border bg-white border-white rounded-full mr-3 text-jhooa-teal-200 text-xl font-monetaBold">
                            <span>3</span>
                        </div>
                        <h2 class="text-3xl font-monetaRegular">@Loc["RegisterMySub"]</h2>
                    </div>

                    <h3 class="text-lg font-amsiSemiBold mb-2 tracking-wide">@Loc["RegisterMySubSubTitle"]</h3>
                    <p class="text-sm font-amsiProRegular mb-6 tracking-wide">@Loc["RegisterMySubDescription"]</p>

                    <InputRadioGroup @bind-Value="Input.SubscriptionType" class="mb-8">
                        <div
                            class="inline-flex items-center space-x-3 w-full rounded-full bg-jhooa-peach-100 border-2 border-white px-6 py-3 mb-3">
                            <InputRadio id="option1"
                                        class="h-5 w-5 rounded-full text-jhooa-brick-500 bg-transparent border-white border-3 focus:ring-0  mr-2"
                                        Value="SubscriptionType.MonthlyOnce"/>

                            <div class="flex flex-row w-full">
                                <label class="basis-1/2 text-white md:text-lg font-monetaRegular">
                                    @Loc["RegisterMonthly"]
                                </label>
                                <label class="basis-1/2 text-white md:text-lg font-monetaRegular text-end">
                                    7 @LocHome["PriceMonthlyDesc"]
                                </label>
                            </div>
                        </div>
                        <div
                            class="inline-flex items-center space-x-3 w-full rounded-full bg-jhooa-peach-100 border-2 border-white px-6 py-3 mb-3">
                            <InputRadio id="option2"
                                        class="h-5 w-5 rounded-full text-jhooa-brick-500 bg-transparent border-white border-3 focus:ring-0  mr-2"
                                        Value="SubscriptionType.MonthlyRecurring"/>

                            <div class="flex flex-row w-full">
                                <label class="basis-[70%] text-white md:text-lg font-monetaRegular">
                                    @Loc["RegisterMonthlyRecurring"]
                                </label>
                                <label class="basis-[30%] text-white md:text-lg font-monetaRegular text-end">
                                    7 @LocHome["PriceMonthlyDesc"]
                                </label>
                            </div>
                        </div>
                        <div
                            class="inline-flex items-center space-x-3 w-full rounded-full bg-jhooa-brick-500 border-2 border-white px-6 py-3 mb-3">
                            <InputRadio id="option3"
                                        class="h-5 w-5 rounded-full text-jhooa-peach-100 bg-transparent border-white border-3 focus:ring-0  mr-2"
                                        Value="SubscriptionType.YearlyOnce"/>

                            <div class="flex flex-row w-full">
                                <label class="basis-[70%] text-white md:text-lg font-monetaRegular">
                                    @Loc["RegisterYearly"]
                                </label>
                                <label class="basis-[30%] text-white md:text-lg font-monetaRegular text-end">
                                    70 @LocHome["PriceYearlyDesc"]
                                </label>
                            </div>
                        </div>
                        <div
                            class="inline-flex items-center space-x-3 w-full rounded-full bg-jhooa-brick-500 border-2 border-white px-6 py-3 mb-3">
                            <InputRadio id="option4"
                                        class="h-5 w-5 rounded-full text-jhooa-peach-100 bg-transparent border-white border-3 focus:ring-0  mr-2"
                                        Value="SubscriptionType.YearlyRecurring"/>

                            <div class="flex flex-row w-full">
                                <label class="basis-[70%] text-white md:text-lg font-monetaRegular">
                                    @Loc["RegisterYearlyRecurring"]
                                </label>
                                <label class="basis-[30%] text-white md:text-lg font-monetaRegular text-end">
                                    70 @LocHome["PriceYearlyDesc"]
                                </label>
                            </div>
                        </div>
                        @if (FeatureFlagsConfig.Value.Companies)
                        {
                            <div
                                class="inline-flex items-center space-x-3 w-full rounded-full bg-jhooa-beige-100 border-2 border-white px-6 py-3 mb-3">
                                <InputRadio id="option5"
                                            class="h-5 w-5 rounded-full text-jhooa-brick-500 bg-transparent border-white border-3 focus:ring-0  mr-2"
                                            Value="SubscriptionType.None"/>

                                <div class="flex flex-row w-full">
                                    <label class="basis-[70%] text-white md:text-lg font-monetaRegular">
                                        @Loc["Code"]
                                    </label>
                                    <InputText @bind-value="Input.Code" class="w-full border-2 border-white bg-transparent text-white placeholder-gray-300 px-3 focus:outline-none active:outline-none" />
                                </div>
                            </div>
                        }
                        
                    </InputRadioGroup>

                    <div class="flex flex-wrap space-x-2 my-8 text-sm">
                        <InputCheckbox @bind-Value="Input.AcceptToc"
                                       class="w-5 h-5 mt-1 text-jhooa-brick-500 bg-transparent border-gray-300 rounded-sm focus:ring-0 mr-4"/>
                        <label for="accepttoc" class="basis-10/12">@((MarkupString)Loc["AcceptToc"].ToString())</label>
                        <ValidationMessage For="@(() => Input.AcceptToc)" class="text-danger mt-2"/>
                    </div>

                    <div class="flex flex-wrap space-x-2 my-8 text-sm">
                        <InputCheckbox @bind-Value="Input.SubscribeToNewsletter"
                                       class="w-5 h-5 mt-1 text-jhooa-brick-500 bg-transparent border-gray-300 rounded-sm focus:ring-0 mr-4"/>
                        <label for="subscribetonewsletter" class="basis-10/12">@Loc["SubscribeToNewsletter"]</label>
                        <ValidationMessage For="@(() => Input.SubscribeToNewsletter)" class="text-danger mt-2"/>

                    </div>

                    <div class="flex flex-wrap space-x-2 my-8 text-sm">
                        <InputCheckbox @bind-Value="Input.AcceptDistribution"
                                       class="w-5 h-5 mt-1 text-jhooa-brick-500 bg-transparent border-gray-300 rounded-sm focus:ring-0 mr-4"/>
                        <label for="acceptdistribution"
                               class="basis-10/12">@Loc["AcceptDiffusion"] <br/>@((MarkupString)Loc["AcceptDiffusionDesc"].ToString())</label>
                        <ValidationMessage For="@(() => Input.AcceptDistribution)" class="text-danger mt-2"/>

                    </div>

                    <button type="submit" class="border-2 border-white p-3 ml-10">@Loc["RegisterButton"]</button>
                </section>
            </div>
        </div>
    </EditForm>
</div>

<style>
    select option {
        margin: 40px;
        background: rgba(0, 0, 0, 0.3);
        color: #fff;
        text-shadow: 0 1px 0 rgba(0, 0, 0, 0.4);
    }
</style>

<script src="js/mobileMenu.js"></script>

@code {
    private List<IdentityError>? _identityErrors;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }

    private string? Message => _identityErrors is null ? null : $"{Loc["Error"]}: {string.Join(", ", _identityErrors.Select(error => error.Description))}";

#if DEBUG
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            RedirectManager.RedirectTo("/Account/Manage");
        }
        
        if (string.IsNullOrWhiteSpace(Input.Lastname))
        {
            Input.Firstname = Guid.NewGuid().ToString();
            Input.Lastname = Guid.NewGuid().ToString();
            Input.Email = $"{Guid.NewGuid().ToString()}@example.com";
            Input.Address = Guid.NewGuid().ToString();
            Input.ZipCode = Guid.NewGuid().ToString();
            Input.City = Guid.NewGuid().ToString();
            Input.Country = Guid.NewGuid().ToString();
            Input.PhoneNumber = Guid.NewGuid().ToString();
            Input.Password = Input.ConfirmPassword = "Abc123!";
            Input.SmallDream = Guid.NewGuid().ToString();
            Input.MediumDream = Guid.NewGuid().ToString();
            Input.BigDream = Guid.NewGuid().ToString();
            Input.AcceptToc = true;
            Input.SubscribeToNewsletter = true;
        }
    }
#endif

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();
        CompanyCode? cc = null;

        _identityErrors = [];
        
        if (Input.SubscriptionType == SubscriptionType.None)
        {
            if (string.IsNullOrWhiteSpace(Input.Code))
            {
                _identityErrors.Add(new IdentityError()
                {
                    Code = "CodeRequired",
                    Description = Loc["CodeRequired"]
                });
                return;
            }
            
            cc = DbContext.CompanyCodes.FirstOrDefault(c => c.Code.ToLower() == Input.Code.ToLower());

            if (cc is null || cc.SubscriptionId.HasValue)
            {
                _identityErrors.Add(new IdentityError()
                {
                    Code = "CodeNotValid",
                    Description = Loc["CodeNotValid"]
                });
                return;
            }
        }

        // Delete not activated user if found based on email
        var existingUser = await UserManager.FindByEmailAsync(Input.Email);
        if (existingUser is not null && existingUser.ActivatedAt is null)
        {
            await UserManager.DeleteAsync(existingUser);
            await DbContext.SaveChangesAsync();
        }

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);

        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            _identityErrors = result.Errors.ToList();
            return;
        }

        Logger.LogInformation("User created a new account with password.");

        if (!string.IsNullOrWhiteSpace(Input.SmallDream))
        {
            DbContext.Dreams.Add(new Dream
            {
                Title = Input.SmallDream,
                Type = DreamTypes.Small,
                UserId = user.Id
            });
        }

        if (!string.IsNullOrWhiteSpace(Input.MediumDream))
        {
            DbContext.Dreams.Add(new Dream
            {
                Title = Input.MediumDream,
                Type = DreamTypes.Medium,
                UserId = user.Id
            });
        }

        if (!string.IsNullOrWhiteSpace(Input.BigDream))
        {
            DbContext.Dreams.Add(new Dream
            {
                Title = Input.BigDream,
                Type = DreamTypes.Big,
                UserId = user.Id
            });
        }

        var stripeCustomerId = await StripeService.EnsureCustomer(user);
        await DbContext.Users.Where(u => u.Id == user.Id)
            .ExecuteUpdateAsync(setters =>
                setters.SetProperty(s => s.StripeCustomerId, stripeCustomerId));

        if (Input.SubscriptionType == SubscriptionType.None && cc is not null)
        {
            var sub = new Subscription
            {
                Start = DateOnly.FromDateTime(DateTime.Now),
                End = DateOnly.FromDateTime(DateTime.Now.AddMonths(cc.Duration)),
                UserId = user.Id,
                Type = Input.SubscriptionType
            };
            
            sub.MarkSubscriptionAsPaid();
            
            await DbContext.Subscriptions.AddAsync(sub);
            await DbContext.SaveChangesAsync();
            
            await DbContext.CompanyCodes.Where(c => c.Id == cc.Id)
                .ExecuteUpdateAsync(setters =>
                    setters.SetProperty(s => s.SubscriptionId, sub.Id)
                        .SetProperty(b => b.UsedAt, DateTimeOffset.Now));
            await DbContext.SaveChangesAsync();

            NavigationManager.NavigateTo($"/Account/RegisterConfirmation?subId={sub.Id}", forceLoad: true);

        }
        else
        {
            var session = await StripeService.GenerateFirstPaymentIntent(stripeCustomerId, Input.SubscriptionType);
            var sub = new Subscription
            {
                Start = DateOnly.FromDateTime(DateTime.Now),
                End = GetEndDate(Input.SubscriptionType),
                UserId = user.Id,
                StripeSessionCheckoutId = session.SessionId,
                Type = Input.SubscriptionType,
                StripePaymentIntentId = session.PaymentIntentId
            };

            await DbContext.Subscriptions.AddAsync(sub);
            await DbContext.SaveChangesAsync();

            NavigationManager.NavigateTo(session.SessionUrl);
        }
    }

    private static DateOnly? GetEndDate(SubscriptionType type)
        => type switch
        {
            SubscriptionType.MonthlyOnce
                => DateOnly.FromDateTime(DateTime.Now.AddMonths(1)),
            SubscriptionType.YearlyOnce
                => DateOnly.FromDateTime(DateTime.Now.AddYears(1)),
            SubscriptionType.MonthlyRecurring => null,
            SubscriptionType.YearlyRecurring => null,
            _ => throw new ArgumentOutOfRangeException(nameof(type), type, null)
        };

    private ApplicationUser CreateUser()
    {
        try
        {
            return new ApplicationUser()
            {
                FirstName = Input.Firstname,
                LastName = Input.Lastname,
                Address = Input.Address,
                ZipCode = Input.ZipCode,
                Country = Input.Country,
                PhoneNumber = Input.PhoneNumber,
                AcceptTos = Input.AcceptToc,
                NewsletterActive = Input.SubscribeToNewsletter,
                CreatedAt = DateTimeOffset.Now,
                BirthDate = Input.BirthDate,
                AcceptDistribution = Input.AcceptDistribution,
                City = Input.City
            };
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                                                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }

        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Resources.Identity))]
        [EmailAddress(ErrorMessageResourceName = "EmailInvalid", ErrorMessageResourceType = typeof(Resources.Identity))]
        public string Email { get; set; } = "";

        [Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Resources.Identity))]
        [StringLength(maximumLength: 100, MinimumLength = 3, ErrorMessageResourceName = "FieldLength", ErrorMessageResourceType = typeof(Resources.Identity))]
        public string Firstname { get; set; } = "";

        [Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Resources.Identity))]
        [StringLength(maximumLength: 100, MinimumLength = 3, ErrorMessageResourceName = "FieldLength", ErrorMessageResourceType = typeof(Resources.Identity))]
        public string Lastname { get; set; } = "";

        [Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Resources.Identity))]
        public DateTimeOffset BirthDate { get; set; } = DateTimeOffset.Now;

        [Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Resources.Identity))]
        [StringLength(maximumLength: 100, MinimumLength = 3, ErrorMessageResourceName = "FieldLength", ErrorMessageResourceType = typeof(Resources.Identity))]
        public string Address { get; set; } = "";

        [Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Resources.Identity))]
        [StringLength(maximumLength: 100, MinimumLength = 3, ErrorMessageResourceName = "FieldLength", ErrorMessageResourceType = typeof(Resources.Identity))]
        public string ZipCode { get; set; } = "";

        [Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Resources.Identity))]
        [StringLength(maximumLength: 100, MinimumLength = 3, ErrorMessageResourceName = "FieldLength", ErrorMessageResourceType = typeof(Resources.Identity))]
        public string City { get; set; } = "";

        [Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Resources.Identity))]
        [StringLength(maximumLength: 100, MinimumLength = 3, ErrorMessageResourceName = "FieldLength", ErrorMessageResourceType = typeof(Resources.Identity))]
        public string Country { get; set; } = "";

        [Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Resources.Identity))]
        [StringLength(maximumLength: 100, MinimumLength = 3, ErrorMessageResourceName = "FieldLength", ErrorMessageResourceType = typeof(Resources.Identity))]
        public string PhoneNumber { get; set; } = "";

        [Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Resources.Identity))]
        [StringLength(maximumLength: 100, MinimumLength = 6, ErrorMessageResourceName = "FieldLength", ErrorMessageResourceType = typeof(Resources.Identity))]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Resources.Identity))]
        [DataType(DataType.Password)]
        [Compare("Password", ErrorMessageResourceName = "PasswordNotMatching", ErrorMessageResourceType = typeof(Resources.Identity))]
        public string ConfirmPassword { get; set; } = "";

        [StringLength(maximumLength: 300, MinimumLength = 0, ErrorMessageResourceName = "FieldLength", ErrorMessageResourceType = typeof(Resources.Identity))]
        public string? SmallDream { get; set; } = "";

        [StringLength(maximumLength: 300, MinimumLength = 0, ErrorMessageResourceName = "FieldLength", ErrorMessageResourceType = typeof(Resources.Identity))]
        public string? MediumDream { get; set; } = "";

        [StringLength(maximumLength: 300, MinimumLength = 0, ErrorMessageResourceName = "FieldLength", ErrorMessageResourceType = typeof(Resources.Identity))]
        public string? BigDream { get; set; } = "";
        
        [StringLength(maximumLength: 9, MinimumLength = 0, ErrorMessageResourceName = "FieldLength", ErrorMessageResourceType = typeof(Resources.Identity))]
        public string? Code { get; set; } = "";

        [Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Resources.Identity))]
        public SubscriptionType SubscriptionType { get; set; }

        [Required(ErrorMessageResourceName = "TermsMustBeAccepted", ErrorMessageResourceType = typeof(Resources.Identity))]
        [Range(typeof(bool), "true", "true", ErrorMessageResourceName = "TermsMustBeAccepted", ErrorMessageResourceType = typeof(Resources.Identity))]
        public bool AcceptToc { get; set; }
        public bool SubscribeToNewsletter { get; set; }
        public bool AcceptDistribution { get; set; }
    }

}
