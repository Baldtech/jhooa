@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using Jhooa.UI.Features.Dreams.Models
@using Microsoft.AspNetCore.Identity
@using Jhooa.UI.Features.Identity.Models
@using Jhooa.UI.Features.Subscriptions.Models
@using Jhooa.UI.Services
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Localization
@using Jhooa.UI.Features.Identity.Components

@inject IStringLocalizer<Resources.Identity> Loc
@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IStripeService StripeService
@inject ApplicationDbContext DbContext

<PageTitle>@Loc["Register"]</PageTitle>

<div class="max-w-screen-xl mx-auto  text-white py-4">
    <p>@Loc["RegisterIntro"]</p>

    <EditForm Model="Input" method="post" OnValidSubmit="RegisterUser" FormName="login" class="space-y-6">
        <StatusMessage Message="@Message"/>
        <DataAnnotationsValidator/>
        <div class="container mx-auto py-8 px-4">
            <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
                <!-- COL 1: CRÉER UN COMPTE -->
                <section class="border-b lg:border-b-0 lg:border-r border-white pb-8 lg:pb-0 pr-0 lg:pr-8">

                    <div class="flex items-center mb-6">
                        <div class="flex items-center justify-center w-8 h-8 border border-white rounded-full mr-3">
                            <span>1</span>
                        </div>
                        <h2 class="text-xl font-semibold">@Loc["CreateAccount"]</h2>
                    </div>

                    <div class="space-y-3">

                        <JhooaInputText @bind-Value="Input.Lastname" DisplayName="@Loc["LastName"]"
                                        ValidationFor="@(() => Input.Lastname)" Autocomplete="lastname"/>
                        <JhooaInputText @bind-Value="Input.Firstname" DisplayName="@Loc["FirstName"]"
                                        ValidationFor="@(() => Input.Firstname)" Autocomplete="firstname"/>
                        <JhooaInputText @bind-Value="Input.Email" DisplayName="@Loc["EmailAddress"]"
                                        ValidationFor="@(() => Input.Email)" Autocomplete="username"/>
                        <JhooaInputText @bind-Value="Input.Address" DisplayName="@Loc["Address"]"
                                        ValidationFor="@(() => Input.Address)" Autocomplete="address"/>
                        <JhooaInputText @bind-Value="Input.ZipCode" DisplayName="@Loc["ZipCode"]"
                                        ValidationFor="@(() => Input.ZipCode)" Autocomplete="zipcode"/>
                        <div>
                            <label for="@Input.Country" class="block mb-1 text-sm">@Loc["Country"]</label>
                            
                            <InputSelect @bind-Value="Input.Country" class="w-full border border-white bg-transparent text-white placeholder-gray-300 px-3 py-2 focus:outline-none">
                                <option value="france">@Loc["France"]</option>
                                <option value="luxembourg">@Loc["Luxembourg"]</option>
                                <option value="belgium">@Loc["Belgium"]</option>
                            </InputSelect>
                            <ValidationMessage For="@(() => Input.Country)" class="text-danger"/>

                        </div>
                        <JhooaInputText @bind-Value="Input.PhoneNumber" DisplayName="@Loc["PhoneNumber"]"
                                        ValidationFor="@(() => Input.PhoneNumber)" Autocomplete="phone"/>
                        <JhooaInputText @bind-Value="Input.Password" DisplayName="@Loc["Password"]"
                                        ValidationFor="@(() => Input.Password)" Autocomplete="" Type="password"/>
                        <JhooaInputText @bind-Value="Input.ConfirmPassword" DisplayName="@Loc["ConfirmPassword"]"
                                        ValidationFor="@(() => Input.ConfirmPassword)" Type="password"/>

                    </div>
                </section>
                <section class="border-b lg:border-b-0 lg:border-r border-white pb-8 lg:pb-0 pr-0 lg:pr-8">
                    <div class="flex items-center mb-6 mt-8 lg:mt-0">
                        <div class="flex items-center justify-center w-8 h-8 border border-white rounded-full mr-3">
                            <span>2</span>
                        </div>
                        <h2 class="text-xl font-semibold">@Loc["RegisterMyWishes"]</h2>
                    </div>
                    <h3 class="text-lg font-semibold mb-2">@Loc["RegisterDreamSubTitle"]</h3>
                    <p class="text-sm mb-6">@Loc["RegisterDreamDescription"]</p>
                    <div class="space-y-3">

                        <JhooaDreamInput @bind-Value="Input.SmallDream" DisplayName="@Loc["FormSmallDream"]"
                                         Placeholder="@Loc["SmallDreamPlaceholder"]"
                                         ValidationFor="@(() => Input.SmallDream)" Autocomplete=""/>
                        <JhooaDreamInput @bind-Value="Input.MediumDream" DisplayName="@Loc["FormMediumDream"]"
                                         Placeholder="@Loc["MediumDreamPlaceholder"]"
                                         ValidationFor="@(() => Input.MediumDream)" Autocomplete=""/>
                        <JhooaDreamInput @bind-Value="Input.BigDream" DisplayName="@Loc["FormBigDream"]"
                                         Placeholder="@Loc["BigDreamPlaceholder"]"
                                         ValidationFor="@(() => Input.BigDream)" Autocomplete=""/>
                    </div>
                </section>
                <section class="pb-8 lg:pb-0">
                    <div class="flex items-center mb-6 mt-8 lg:mt-0">
                        <div class="flex items-center justify-center w-8 h-8 border border-white rounded-full mr-3">
                            <span>3</span>
                        </div>
                        <h2 class="text-xl font-semibold">@Loc["RegisterMySub"]</h2>
                    </div>

                    <h3 class="text-lg font-semibold mb-2">@Loc["RegisterMySubSubTitle"]</h3>
                    <p class="text-sm mb-6">@Loc["RegisterMySubDescription"]</p>

                    <InputRadioGroup @bind-Value="Input.SubscriptionType">
                        <div class="flex items-center space-x-2">
                            <InputRadio id="option1" class="h-5 w-5 rounded-full border-gray-300 "
                                        Value="SubscriptionType.MonthlyOnce"/>
                            <label for="option1" class="">@Loc["RegisterMonthly"]</label>
                        </div>

                        <div class="flex items-center space-x-2">
                            <InputRadio id="option2" class="h-5 w-5 rounded-full border-gray-300 "
                                        Value="SubscriptionType.MonthlyRecurring"/>
                            <label for="option2" class="">@Loc["RegisterMonthlyRecurring"]</label>
                        </div>

                        <div class="flex items-center space-x-2">
                            <InputRadio id="option3" class="h-5 w-5 rounded-full border-gray-300 "
                                        Value="SubscriptionType.YearlyOnce"/>
                            <label for="option3" class="">@Loc["RegisterYearly"]</label>
                        </div>

                        <div class="flex items-center space-x-2">
                            <InputRadio id="option4" class="h-5 w-5 rounded-full border-gray-300 "
                                        Value="SubscriptionType.YearlyRecurring"/>
                            <label for="option4" class="">@Loc["RegisterYearlyRecurring"]</label>
                        </div>
                    </InputRadioGroup>

                    <div class="flex items-center space-x-2 my-5">
                        <InputCheckbox @bind-Value="Input.AcceptToc" class="h-5 w-5 rounded border-gray-300 "/>
                        <label for="accepttoc" class="">@((MarkupString)Loc["AcceptToc"].ToString())</label>
                    </div>

                    <div class="flex items-center space-x-2 mb-8">
                        <InputCheckbox @bind-Value="Input.SubscribeToNewsletter"
                                       class="h-5 w-5 rounded border-gray-300 "/>
                        <label for="subscribetonewsletter" class="">@Loc["SubscribeToNewsletter"]</label>
                    </div>

                    <button type="submit" class="border-2 border-white p-3 bg-gray-400">@Loc["RegisterButton"]</button>
                </section>
            </div>
        </div>
    </EditForm>
</div>


@code {
    private IEnumerable<IdentityError>? _identityErrors;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }

    private string? Message => _identityErrors is null ? null : $"{Loc["Error"]}: {string.Join(", ", _identityErrors.Select(error => error.Description))}";

// #if DEBUG
//     protected override void OnInitialized()
//     {
//         if (string.IsNullOrWhiteSpace(Input.Lastname))
//         {
//             Input.Firstname = Guid.NewGuid().ToString();
//             Input.Lastname = Guid.NewGuid().ToString();
//             Input.Email = $"{Guid.NewGuid().ToString()}@example.com";
//             Input.Address = Guid.NewGuid().ToString();
//             Input.ZipCode = Guid.NewGuid().ToString();
//             Input.Country = Guid.NewGuid().ToString();
//             Input.PhoneNumber = Guid.NewGuid().ToString();
//             Input.Password = Input.ConfirmPassword = "Abc123!";
//             Input.SmallDream = Guid.NewGuid().ToString();
//             Input.MediumDream = Guid.NewGuid().ToString();
//             Input.BigDream = Guid.NewGuid().ToString();
//             Input.AcceptToc = true;
//             Input.SubscribeToNewsletter = true;
//         }
//     }
// #endif

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();

        // Delete not activated user if found based on email
        var existingUser = await UserManager.FindByEmailAsync(Input.Email);
        if (existingUser is not null && existingUser.ActivatedAt is null)
        {
            await UserManager.DeleteAsync(existingUser);
            await DbContext.SaveChangesAsync();
        }

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);

        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            _identityErrors = result.Errors;
            return;
        }

        Logger.LogInformation("User created a new account with password.");

        var smallDream = new Dream
        {
            Title = Input.SmallDream,
            Type = DreamTypes.Small,
            UserId = user.Id
        };
        var mediumDream = new Dream
        {
            Title = Input.MediumDream,
            Type = DreamTypes.Medium,
            UserId = user.Id
        };
        var bigDream = new Dream
        {
            Title = Input.BigDream,
            Type = DreamTypes.Big,
            UserId = user.Id
        };

        DbContext.Dreams.AddRange(smallDream, mediumDream, bigDream);

        var stripeCustomerId = await StripeService.EnsureCustomer(user);
        await DbContext.Users.Where(u => u.Id == user.Id)
            .ExecuteUpdateAsync(setters =>
                setters.SetProperty(s => s.StripeCustomerId, stripeCustomerId));

        var session = await StripeService.GenerateFirstPaymentIntent(stripeCustomerId, Input.SubscriptionType);
        var sub = new Subscription
        {
            Start = DateOnly.FromDateTime(DateTime.Now),
            End = GetEndDate(Input.SubscriptionType),
            UserId = user.Id,
            StripeSessionCheckoutId = session.SessionId,
            Type = Input.SubscriptionType
        };

        await DbContext.Subscriptions.AddAsync(sub);
        await DbContext.SaveChangesAsync();

        NavigationManager.NavigateTo(session.SessionUrl);
    }

    private static DateOnly? GetEndDate(SubscriptionType type)
        => type switch
        {
            SubscriptionType.MonthlyOnce
                => DateOnly.FromDateTime(DateTime.Now.AddMonths(1)),
            SubscriptionType.YearlyOnce
                => DateOnly.FromDateTime(DateTime.Now.AddYears(1)),
            SubscriptionType.MonthlyRecurring => null,
            SubscriptionType.YearlyRecurring => null,
            _ => throw new ArgumentOutOfRangeException(nameof(type), type, null)
        };

    private ApplicationUser CreateUser()
    {
        try
        {
            return new ApplicationUser()
            {
                FirstName = Input.Firstname,
                LastName = Input.Lastname,
                Address = Input.Address,
                ZipCode = Input.ZipCode,
                Country = Input.Country,
                PhoneNumber = Input.PhoneNumber,
                AcceptTos = Input.AcceptToc,
                NewsletterActive = Input.SubscribeToNewsletter,
                CreatedAt = DateTimeOffset.Now
            };
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                                                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }

        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Resources.Identity))]
        [EmailAddress(ErrorMessageResourceName = "EmailInvalid", ErrorMessageResourceType = typeof(Resources.Identity))]
        public string Email { get; set; } = "";

        [Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Resources.Identity))]
        [StringLength(maximumLength: 100, MinimumLength = 3, ErrorMessageResourceName = "FieldLength", ErrorMessageResourceType = typeof(Resources.Identity))]
        public string Firstname { get; set; } = "";

        [Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Resources.Identity))]
        [StringLength(maximumLength: 100, MinimumLength = 3, ErrorMessageResourceName = "FieldLength", ErrorMessageResourceType = typeof(Resources.Identity))]
        public string Lastname { get; set; } = "";

        [Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Resources.Identity))]
        [StringLength(maximumLength: 100, MinimumLength = 3, ErrorMessageResourceName = "FieldLength", ErrorMessageResourceType = typeof(Resources.Identity))]
        public string Address { get; set; } = "";

        [Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Resources.Identity))]
        [StringLength(maximumLength: 100, MinimumLength = 3, ErrorMessageResourceName = "FieldLength", ErrorMessageResourceType = typeof(Resources.Identity))]
        public string ZipCode { get; set; } = "";

        [Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Resources.Identity))]
        [StringLength(maximumLength: 100, MinimumLength = 3, ErrorMessageResourceName = "FieldLength", ErrorMessageResourceType = typeof(Resources.Identity))]
        public string Country { get; set; } = "";

        [Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Resources.Identity))]
        [StringLength(maximumLength: 100, MinimumLength = 3, ErrorMessageResourceName = "FieldLength", ErrorMessageResourceType = typeof(Resources.Identity))]
        public string PhoneNumber { get; set; } = "";

        [Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Resources.Identity))]
        [StringLength(maximumLength: 100, MinimumLength = 6, ErrorMessageResourceName = "FieldLength", ErrorMessageResourceType = typeof(Resources.Identity))]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Resources.Identity))]
        [DataType(DataType.Password)]
        [Compare("Password", ErrorMessageResourceName = "PasswordNotMatching", ErrorMessageResourceType = typeof(Resources.Identity))]
        public string ConfirmPassword { get; set; } = "";


        [Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Resources.Identity))]
        [StringLength(maximumLength: 100, MinimumLength = 3, ErrorMessageResourceName = "FieldLength", ErrorMessageResourceType = typeof(Resources.Identity))]
        public string SmallDream { get; set; } = "";

        [Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Resources.Identity))]
        [StringLength(maximumLength: 100, MinimumLength = 3, ErrorMessageResourceName = "FieldLength", ErrorMessageResourceType = typeof(Resources.Identity))]
        public string MediumDream { get; set; } = "";

        [Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Resources.Identity))]
        [StringLength(maximumLength: 100, MinimumLength = 3, ErrorMessageResourceName = "FieldLength", ErrorMessageResourceType = typeof(Resources.Identity))]
        public string BigDream { get; set; } = "";

        [Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Resources.Identity))]
        public SubscriptionType SubscriptionType { get; set; }


        public bool AcceptToc { get; set; }
        public bool SubscribeToNewsletter { get; set; }
    }

}
