@page "/Account/ConfirmEmail"

@using System.Text
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Jhooa.UI.Features.Identity.Models
@using Microsoft.Extensions.Localization

@inject IStringLocalizer<Resources.Identity> Loc
@inject UserManager<ApplicationUser> UserManager
@inject IdentityRedirectManager RedirectManager
@layout LoginLayout

<PageTitle>@Loc["ConfirmEmail"]</PageTitle>

<div class="grid grid-cols-1 md:grid-cols-2 gap-4 max-w-4xl w-full mx-4 md:mx-auto my-10">

    <div class="flex flex-col items-center justify-center text-center text-white py-8 md:py-0 border-b lg:border-b-0 lg:border-r border-white">
        <h2 class="text-3xl md:text-3xl font-semibold mb-6 font-monetaRegular">
            @Loc["CreateAccount"]
        </h2>
        <a href="/Account/Register"
           class="border border-white text-white px-6 py-2 text-sm font-medium bg-gray-400/50 font-amsiSemiBold"
        >
            @Loc["CreateAccount"]
        </a>
    </div>


    <div
        class="flex flex-col items-center justify-center text-white py-8 md:py-0">
        <h2 class="text-3xl md:text-3xl font-semibold mb-6  font-monetaRegular">
            @Loc["ConfirmEmail"]
        </h2>

        <p class="mb-4">
            <StatusMessage Message="@_statusMessage"/>
        </p>
        <p>
            <a href="/Account/Login"
               class="border border-white text-white px-6 py-2 text-sm font-medium bg-gray-400/50 font-amsiSemiBold"
            >
                @Loc["Login"]
            </a>
        </p>
    </div>
</div>
<script src="js/mobileMenu.js"></script>


@code {
    private string? _statusMessage;

    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromQuery] private string? UserId { get; set; }

    [SupplyParameterFromQuery] private string? Code { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (UserId is null || Code is null)
        {
            RedirectManager.RedirectTo("");
        }

        var user = await UserManager.FindByIdAsync(UserId);
        if (user is null)
        {
            HttpContext.Response.StatusCode = StatusCodes.Status404NotFound;
            _statusMessage = $"Error loading user with ID {UserId}";
        }
        else
        {
            var code = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(Code));
            var result = await UserManager.ConfirmEmailAsync(user, code);

            _statusMessage = result.Succeeded ? Loc["ConfirmEmailThankYou"] : Loc["ConfirmEmailError"];
        }
    }

}