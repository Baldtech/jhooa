@page "/Account/ConfirmEmail"

@using System.Text
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Jhooa.UI.Features.Identity.Models
@using Microsoft.Extensions.Localization

@inject IStringLocalizer<Resources.Identity> Loc
@inject UserManager<ApplicationUser> UserManager
@inject IdentityRedirectManager RedirectManager
@inject NavigationManager NavigationManager

<PageTitle>@Loc["ConfirmEmail"]</PageTitle>

<header class="max-w-screen-xl mx-auto text-white">
    <h1>@Loc["ConfirmEmail"]</h1>
    <StatusMessage Message="@_statusMessage"/>
    <p>
        <JhooaButtonLink Text="@Loc["Login"]"
                         Url="@(NavigationManager.GetUriWithQueryParameters("Account/Login", new Dictionary<string, object?> { }))"/>
    </p>
    
</header>


@code {
    private string? _statusMessage;

    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromQuery] private string? UserId { get; set; }

    [SupplyParameterFromQuery] private string? Code { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (UserId is null || Code is null)
        {
            RedirectManager.RedirectTo("");
        }

        var user = await UserManager.FindByIdAsync(UserId);
        if (user is null)
        {
            HttpContext.Response.StatusCode = StatusCodes.Status404NotFound;
            _statusMessage = $"Error loading user with ID {UserId}";
        }
        else
        {
            var code = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(Code));
            var result = await UserManager.ConfirmEmailAsync(user, code);

            _statusMessage = result.Succeeded ? Loc["ConfirmEmailThankYou"] : Loc["ConfirmEmailError"];
        }
    }

}