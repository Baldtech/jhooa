@page "/Account/ResetPassword"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Jhooa.UI.Features.Identity.Models
@using Microsoft.Extensions.Localization
@using Jhooa.UI.Features.Identity.Components
@layout LoginLayout
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IStringLocalizer<Resources.Identity> Loc
@inject IdentityRedirectManager RedirectManager
@inject UserManager<ApplicationUser> UserManager

<PageTitle>@Loc["ResetPassword"]</PageTitle>

<div class="grid grid-cols-1 md:grid-cols-2 gap-4 max-w-4xl w-full mx-4 md:mx-auto my-10">

    <div
        class="flex flex-col items-center justify-center text-center text-white py-8 md:py-0 border-b lg:border-b-0 lg:border-r border-white">
        <h2 class="text-3xl md:text-3xl font-semibold mb-6 font-monetaRegular">
            @Loc["CreateAccount"]
        </h2>
        <a href="/Account/Register"
           class="border border-white text-white px-6 py-2 text-sm font-medium bg-gray-400/50 font-amsiSemiBold"
        >
            @Loc["CreateAccount"]
        </a>
    </div>

    <div
        class="flex flex-col items-center justify-center text-white py-8 md:py-0">
        <h2 class="text-3xl md:text-3xl font-semibold mb-6  font-monetaRegular">
            @Loc["ResetPassword"]
        </h2>

        <EditForm Model="Input" method="post" OnValidSubmit="OnValidSubmitAsync" FormName="reset-password"
                  class="space-y-4 w-3/4 max-w-sm mx-auto">
            <DataAnnotationsValidator/>

            <JhooaInputText @bind-Value="Input.Email" DisplayName="@Loc["EmailAddress"]"
                            ValidationFor="@(() => Input.Email)"/>
            <JhooaInputText @bind-Value="Input.Password" DisplayName="@Loc["Password"]"
                            ValidationFor="@(() => Input.Password)" Type="password"/>
            <JhooaInputText @bind-Value="Input.ConfirmPassword" DisplayName="@Loc["ConfirmPassword"]"
                            ValidationFor="@(() => Input.ConfirmPassword)" Type="password"/>

            <div class="flex justify-center">
                <button
                    type="submit"
                    class="border border-white text-white px-6 py-2 text-sm font-medium bg-gray-400 bg-gray-400/50 font-amsiSemiBold"
                >
                    @Loc["Reset"]
                </button>
            </div>
        </EditForm>
    </div>
</div>

<script src="js/mobileMenu.js"></script>

@code {
    private IEnumerable<IdentityError>? _identityErrors;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery] private string? Code { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userState = authState.User;

        if (userState.Identity?.IsAuthenticated == true)
        {
            RedirectManager.RedirectTo("/Account/Manage");
        }
        
        if (Code is null)
        {
            RedirectManager.RedirectTo("Account/InvalidPasswordReset");
        }

        Input.Code = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(Code));
    }

    private async Task OnValidSubmitAsync()
    {
        var user = await UserManager.FindByEmailAsync(Input.Email);
        if (user is null)
        {
            // Don't reveal that the user does not exist
            RedirectManager.RedirectTo("Account/ResetPasswordConfirmation");
        }

        var result = await UserManager.ResetPasswordAsync(user, Input.Code, Input.Password);
        if (result.Succeeded)
        {
            RedirectManager.RedirectTo("Account/ResetPasswordConfirmation");
        }

        _identityErrors = result.Errors;
    }

    private sealed class InputModel
    {
        [Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Resources.Identity))]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Resources.Identity))]
        [StringLength(maximumLength: 100, MinimumLength = 3, ErrorMessageResourceName = "FieldLength", ErrorMessageResourceType = typeof(Resources.Identity))]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Resources.Identity))]
        [DataType(DataType.Password)]
        [Compare("Password", ErrorMessageResourceName = "PasswordNotMatching", ErrorMessageResourceType = typeof(Resources.Identity))]
        public string ConfirmPassword { get; set; } = "";

        [Required] public string Code { get; set; } = "";
    }

}
