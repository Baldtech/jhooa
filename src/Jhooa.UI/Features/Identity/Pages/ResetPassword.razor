@page "/Account/ResetPassword"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Jhooa.UI.Features.Identity.Models
@using Microsoft.Extensions.Localization
@using Jhooa.UI.Features.Identity.Components

@inject IStringLocalizer<Resources.Identity> Loc
@inject IdentityRedirectManager RedirectManager
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavigationManager

<PageTitle>@Loc["ResetPassword"]</PageTitle>

<section class="max-w-screen-xl mx-auto grid grid-cols-2 gap-4 text-white">
    <div>
        <h3 class="mb-8">@Loc["CreateAccount"]</h3>
        <JhooaButtonLink Text="@Loc["CreateAccount"]" Url="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { }))" />
    </div>
    <div>
        <h3>@Loc["ResetPassword"]</h3>
        <StatusMessage Message="@Message" />
        <EditForm Model="Input" FormName="reset-password" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />

            <JhooaInputText @bind-Value="Input.Email" DisplayName="@Loc["EmailAddress"]" ValidationFor="@(() => Input.Email)" />
            <JhooaInputText @bind-Value="Input.Password" DisplayName="@Loc["Password"]" ValidationFor="@(() => Input.Password)" Type="password" />
            <JhooaInputText @bind-Value="Input.ConfirmPassword" DisplayName="@Loc["ConfirmPassword"]" ValidationFor="@(() => Input.ConfirmPassword)" Type="password" />

            <input type="hidden" name="Input.Code" value="@Input.Code" />
            
            <button type="submit" class="border-2 border-white p-3 bg-gray-400 mt-8">@Loc["Reset"]</button>

        </EditForm>
    </div>
</section>

<script src="js/mobileMenu.js"></script>

@code {
    private IEnumerable<IdentityError>? _identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? Code { get; set; }

    private string? Message => _identityErrors is null ? null : $"{Loc["Error"]}: {string.Join(", ", _identityErrors.Select(error => error.Description))}";

    protected override void OnInitialized()
    {
        if (Code is null)
        {
            RedirectManager.RedirectTo("Account/InvalidPasswordReset");
        }

        Input.Code = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(Code));
    }

    private async Task OnValidSubmitAsync()
    {
        var user = await UserManager.FindByEmailAsync(Input.Email);
        if (user is null)
        {
            // Don't reveal that the user does not exist
            RedirectManager.RedirectTo("Account/ResetPasswordConfirmation");
        }

        var result = await UserManager.ResetPasswordAsync(user, Input.Code, Input.Password);
        if (result.Succeeded)
        {
            RedirectManager.RedirectTo("Account/ResetPasswordConfirmation");
        }

        _identityErrors = result.Errors;
    }

    private sealed class InputModel
    {
        [Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Resources.Identity))]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Resources.Identity))]
        [StringLength(maximumLength: 100, MinimumLength = 3, ErrorMessageResourceName = "FieldLength", ErrorMessageResourceType = typeof(Resources.Identity))]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Resources.Identity))]
        [DataType(DataType.Password)]
        [Compare("Password", ErrorMessageResourceName = "PasswordNotMatching", ErrorMessageResourceType = typeof(Resources.Identity))]
        public string ConfirmPassword { get; set; } = "";

        [Required]
        public string Code { get; set; } = "";
    }
}
