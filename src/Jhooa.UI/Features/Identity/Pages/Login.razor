@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using Jhooa.UI.Features.Identity.Models
@using Microsoft.Extensions.Localization
@using Jhooa.UI.Features.Identity.Components

@inject IStringLocalizer<Resources.Identity> Loc
@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject UserManager<ApplicationUser> UserManager

<PageTitle>@Loc["Login"]</PageTitle>

<section class="max-w-screen-xl mx-auto grid grid-cols-2 gap-4 text-white">
    <div>
        <h3 class="mb-8">@Loc["CreateAccount"]</h3>
        <JhooaButtonLink Text="@Loc["CreateAccount"]" Url="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { }))" />
    </div>
    <div>
        <h3>@Loc["AlreadyHaveAccount"]</h3>
        <StatusMessage Message="@_errorMessage"/>
        <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login" class="space-y-6">
            <DataAnnotationsValidator/>
            
            <JhooaInputText @bind-Value="Input.Email" DisplayName="@Loc["EmailAddress"]" ValidationFor="@(() => Input.Email)" />
            <JhooaInputText @bind-Value="Input.Password" DisplayName="@Loc["Password"]" ValidationFor="@(() => Input.Password)" Type="password" />
            
            <div class="flex items-center space-x-2">
                <InputCheckbox @bind-Value="Input.RememberMe" class="h-5 w-5 rounded border-gray-300 "/>
                <label for="rememberme" class="">@Loc["FormRememberMe"]</label>
            </div>
            
            <button type="submit" class="border-2 border-white p-3 float-right bg-gray-400">@Loc["FormLogin"]</button>
            <div class="clear-both"></div>
            <div>
                <p>
                    <a href="Account/ForgotPassword">@Loc["ForgotPassword"]</a>
                </p>
            </div>
        </EditForm>
    </div>
</section>

@code {
    private string? _errorMessage;
    
    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else if (result.IsNotAllowed)
        {
            var user = await UserManager.FindByEmailAsync(Input.Email);
            if (user is not null && !(await UserManager.IsEmailConfirmedAsync(user)))
            {
                _errorMessage = Loc["LoginEmailNotConfirmed"];
            }
            else
            {
                _errorMessage = Loc["LoginInvalidAttempt"];
            }
        }
        else
        {
            _errorMessage = Loc["LoginInvalidAttempt"];
        }
    }

    private sealed class InputModel
    {
        [Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Resources.Identity))] 
        [EmailAddress(ErrorMessageResourceName = "EmailInvalid", ErrorMessageResourceType = typeof(Resources.Identity))]
        public string Email { get; set; } = "";

        [Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Resources.Identity))] 
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        public bool RememberMe { get; set; }
    }

}
