@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using System.Security.Claims
@using Jhooa.UI.Configuration
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using Jhooa.UI.Features.Identity.Models
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Localization
@layout LoginLayout
@inject IStringLocalizer<Resources.Identity> Loc
@inject IStringLocalizer<Jhooa.UI.Resources.Shared> LocShared
@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject IdentityRedirectManager RedirectManager
@inject UserManager<ApplicationUser> UserManager
@inject ApplicationDbContext DbContext

<PageTitle>@LocShared["TitleLogin"]</PageTitle>

<div class="grid grid-cols-1 md:grid-cols-2 gap-4 max-w-4xl w-full mx-4 md:mx-auto my-10">

    <div class="flex flex-col items-center justify-center text-center text-white py-8 md:py-0 border-b lg:border-b-0 lg:border-r border-white">
        <h2 class="text-3xl md:text-3xl font-semibold mb-6 font-monetaRegular">
            @Loc["CreateAccount"]
        </h2>
        <a href="/Account/Register"
           class="border border-white text-white px-6 py-2 text-sm font-medium bg-gray-400/50 font-amsiSemiBold"
        >
            @Loc["CreateAccount"]
        </a>
    </div>


    <div
        class="flex flex-col items-center justify-center text-white py-8 md:py-0">
        <h2 class="text-3xl md:text-3xl font-semibold mb-6  font-monetaRegular">
            @Loc["AlreadyHaveAccount"]
        </h2>

        <StatusMessage Message="@_errorMessage"/>

        <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login"
                  class="space-y-4 w-3/4 max-w-sm mx-auto">
            <DataAnnotationsValidator/>

            <JhooaInputText @bind-Value="Input.Email" DisplayName="@Loc["EmailAddress"]"
                            ValidationFor="@(() => Input.Email)"/>
            <JhooaInputText @bind-Value="Input.Password" DisplayName="@Loc["Password"]"
                            ValidationFor="@(() => Input.Password)" Type="password"/>

            <div class="flex items-center space-x-2">
                <InputCheckbox @bind-Value="Input.RememberMe" class="w-5 h-5 mt-1 text-jhooa-brick-500 bg-transparent border-gray-300 rounded-sm focus:ring-0 mr-4"/>
                <label for="rememberme" class="">@Loc["FormRememberMe"]</label>
            </div>

            <div class="flex justify-center">
                <button
                    type="submit"
                    class="border border-white text-white px-6 py-2 text-sm font-medium bg-gray-400 bg-gray-400/50 font-amsiSemiBold"
                >
                    @Loc["FormLogin"]
                </button>
            </div>
            


            <div class="mt-4 flex justify-center">
                <p>
                    <a href="Account/ForgotPassword">@Loc["ForgotPassword"]</a>
                </p>
            </div>
        </EditForm>
    </div>
</div>

<script src="js/mobileMenu.js"></script>

@code {
    private string? _errorMessage;

    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        var user = await UserManager.FindByEmailAsync(Input.Email);
        if (user is null)
        {
            _errorMessage = Loc["LoginInvalidAttempt"];
            return;
        }

        var userView = await DbContext.UsersView.FirstAsync(u => u.Email.ToLower() == Input.Email.ToLower());

        var result = await SignInManager.CheckPasswordSignInAsync(user, Input.Password, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            
            var roles = await SignInManager.UserManager.GetRolesAsync(user);
            
            // Admin
            if (roles.Contains("Admin"))
            {
                await SignInManager.SignInAsync(user, Input.RememberMe);
                RedirectManager.RedirectTo("/Admin");
            }
            else
            {
                if (userView.IsSubscriptionActive)
                {
                    var customClaims = new List<Claim>()
                    {
                        new(Constants.Claims.IsSubActive, "true")
                    };
                    if (userView.SubscriptionStartDate.HasValue)
                    {
                        customClaims.Add(new Claim(Constants.Claims.SubStartDate, userView.SubscriptionStartDate.Value.ToString("yyyy-MM-dd")));
                    }
                    if (userView.SubscriptionEndDate.HasValue)
                    {
                        customClaims.Add(new Claim(Constants.Claims.SubEndDate, userView.SubscriptionEndDate.Value.ToString("yyyy-MM-dd")));
                    }
                    await SignInManager.SignInWithClaimsAsync(user, Input.RememberMe, customClaims);

                    RedirectManager.RedirectTo(ReturnUrl);
                }
                else
                {
                    var customClaims = new[] { new Claim(Constants.Claims.IsSubActive, "false") };
                    await SignInManager.SignInWithClaimsAsync(user, Input.RememberMe, customClaims);
                    
                    RedirectManager.RedirectTo("/Account/Manage/Subscription");
                }
            }
            
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else if (result.IsNotAllowed)
        {
            if (!await UserManager.IsEmailConfirmedAsync(user))
            {
                _errorMessage = Loc["LoginEmailNotConfirmed"];
            }
            else
            {
                _errorMessage = Loc["LoginInvalidAttempt"];
            }
        }
        else
        {
            _errorMessage = Loc["LoginInvalidAttempt"];
        }
    }

    private sealed class InputModel
    {
        [Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Resources.Identity))]
        [EmailAddress(ErrorMessageResourceName = "EmailInvalid", ErrorMessageResourceType = typeof(Resources.Identity))]
        public string Email { get; set; } = "";

        [Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Resources.Identity))]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        public bool RememberMe { get; set; }
    }

}
