@page "/Account/RegisterConfirmation"

@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Jhooa.UI.Features.Identity.Models
@using Jhooa.UI.Features.Subscriptions.Models
@using Jhooa.UI.Services
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Localization
@using Jhooa.UI.Features.Identity.Components

@inject IMailService MailService
@inject ApplicationDbContext DbContext
@inject IStripeService StripeService
@inject IStringLocalizer<Resources.Identity> Loc
@layout LoginLayout

<PageTitle>@Loc["RegisterConfirmation"]</PageTitle>


<div class="grid grid-cols-1 md:grid-cols-2 gap-4 max-w-4xl w-full mx-4 md:mx-auto my-10">

    <div class="flex flex-col items-center justify-center text-center text-white py-8 md:py-0 border-b lg:border-b-0 lg:border-r border-white">
        <h2 class="text-3xl md:text-3xl font-semibold mb-6 font-monetaRegular">
            @Loc["CreateAccount"]
        </h2>
        <a href="/Account/Register"
           class="border border-white text-white px-6 py-2 text-sm font-medium bg-gray-400/50 font-amsiSemiBold"
        >
            @Loc["CreateAccount"]
        </a>
    </div>

    @if (CheckoutSessionId is not null)
    {
        <div
            class="flex flex-col items-center justify-center text-white py-8 md:py-0">
            <h2 class="text-3xl md:text-3xl font-semibold mb-6  font-monetaRegular">
                @Loc["RegisterConfirmation"]
            </h2>

            <p class="mb-4">@Loc["AccountCreatedAndPaymentDone"]</p>

            <p>
                <a href="/Account/Login"
                   class="border border-white text-white px-6 py-2 text-sm font-medium bg-gray-400/50 font-amsiSemiBold"
                >
                    @Loc["Login"]
                </a>
            </p>
        </div>
    }

    
</div>
<script src="js/mobileMenu.js"></script>

@code {

    [SupplyParameterFromQuery(Name = "session-id")]
    public string? CheckoutSessionId { get; set; }


    protected override async Task OnInitializedAsync()
    {
        if (CheckoutSessionId is not null)
        {
            var sub = await DbContext.Subscriptions
                .FirstOrDefaultAsync(s => s.StripeSessionCheckoutId == CheckoutSessionId);

            if (sub is not null)
            {
                var user = await DbContext.Users.FirstAsync(user => user.Id == sub.UserId);
                // TODO: remove EmailConfirmed
                await DbContext.Users.Where(u => u.Id == user.Id)
                    .ExecuteUpdateAsync(setters => setters
                            .SetProperty(s => s.ActivatedAt, DateTimeOffset.Now));

                if (sub.Type is SubscriptionType.MonthlyOnce or SubscriptionType.YearlyOnce)
                {
                    var result = await StripeService.RetrievePaymentIntentIdIfPaid(CheckoutSessionId);
                    if (result.IsSuccess)
                    {
                        sub.MarkPaymentAsPaid(result.Value);
                    }
                }
                else
                {
                    var result = await StripeService.RetrieveSubscriptionId(CheckoutSessionId);
                    if (result.IsSuccess)
                    {
                        sub.MarkSubscriptionAsPaid(result.Value);
                    }
                }
                
                await DbContext.Users.Where(e => e.Id == user.Id)
                    .ExecuteUpdateAsync(setters => setters
                        .SetProperty(b => b.ActivatedAt, DateTimeOffset.Now)
                        .SetProperty(b => b.EmailConfirmed, true));
                
                await MailService.SendWithTemplateAsync(user.Email!, cultureInfo: CultureInfo.CurrentCulture, 
                    templateData: new
                    {
                        Title = Loc["EmailAccountConfirmationTitle"],
                        Content = Loc["EmailAccountConfirmationContent"],
                    }, subject: Loc["EmailAccountConfirmationSubject"]);
                
                await DbContext.SaveChangesAsync();
            }
        }
    }

}
