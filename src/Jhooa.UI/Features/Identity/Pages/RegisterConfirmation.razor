@page "/Account/RegisterConfirmation"

@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Jhooa.UI.Features.Identity.Models
@using Jhooa.UI.Features.Subscriptions.Models
@using Jhooa.UI.Services
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Localization
@using Jhooa.UI.Features.Identity.Components

@inject UserManager<ApplicationUser> UserManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject NavigationManager NavigationManager
@inject ApplicationDbContext DbContext
@inject IStripeService StripeService
@inject IStringLocalizer<Resources.Identity> Loc

<PageTitle>@Loc["RegisterConfirmation"]</PageTitle>

@if (CheckoutSessionId is not null)
{
    <section class="max-w-screen-xl mx-auto  text-white">
        <h3 class="mb-8">@Loc["RegisterConfirmation"]</h3>

        <p>@Loc["AccountCreatedAndPaymentDone"]</p>
        <p class="mb-8">@Loc["CheckEmailForConfirmation"]</p>

        <JhooaButtonLink Text="@Loc["Login"]"
                         Url="@(NavigationManager.GetUriWithQueryParameters("Account/Login", new Dictionary<string, object?> { }))"/>

    </section>
}
<script src="js/mobileMenu.js"></script>

@code {

    [SupplyParameterFromQuery(Name = "session-id")]
    public string? CheckoutSessionId { get; set; }


    protected override async Task OnInitializedAsync()
    {
        if (CheckoutSessionId is not null)
        {
            var sub = await DbContext.Subscriptions
                .FirstOrDefaultAsync(s => s.StripeSessionCheckoutId == CheckoutSessionId);

            if (sub is not null)
            {
                var user = await DbContext.Users.FirstAsync(user => user.Id == sub.UserId);
                await DbContext.Users.Where(u => u.Id == user.Id)
                    .ExecuteUpdateAsync(setters =>
                        setters.SetProperty(s => s.ActivatedAt, DateTimeOffset.Now));

                if (sub.Type is SubscriptionType.MonthlyOnce or SubscriptionType.YearlyOnce)
                {
                    var result = await StripeService.RetrievePaymentIntentIdIfPaid(CheckoutSessionId);
                    if (result.IsSuccess)
                    {
                        sub.MarkPaymentAsPaid(result.Value);
                    }
                }
                else
                {
                    var result = await StripeService.RetrieveSubscriptionId(CheckoutSessionId);
                    if (result.IsSuccess)
                    {
                        sub.MarkSubscriptionAsPaid(result.Value);
                    }
                }

                var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
                code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));

                var callbackUrl = NavigationManager.GetUriWithQueryParameters(
                    NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
                    new Dictionary<string, object?> { ["userId"] = user.Id, ["code"] = code });

                await EmailSender.SendConfirmationLinkAsync(user, user.Email!, HtmlEncoder.Default.Encode(callbackUrl));

                await DbContext.SaveChangesAsync();
            }
        }
    }

}
