@page "/Account/Manage/Subscription"
@attribute [Authorize]
@layout ManageLayout

@using System.Security.Claims
@using Jhooa.UI.Features.Identity.Models
@using Jhooa.UI.Features.Identity.Shared
@using Jhooa.UI.Features.Subscriptions.Models
@using Jhooa.UI.Services
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Localization
@using Jhooa.UI.Features.Subscriptions.Components

@inject IStringLocalizer<Resources.Subscriptions> Loc
@inject IStripeService StripeService
@inject ApplicationDbContext DbContext
@inject AuthenticationStateProvider AuthStateProvider

<PageTitle>@Loc["MySubscription"]</PageTitle>

<section class="max-w-screen-md mx-auto  text-white">
    <h2 class="text-xl font-semibold text-center mb-4">@Loc["MySubscriptionTitle"]</h2>

    <p class="text-center mb-4 px-4">@Loc["MySubscriptionDesc"]</p>

    <StatusMessage Message="@_message"/>

    @if (_userView is not null)
    {
        @if (_userView.IsSubscriptionActive)
        {
            <p class="text-center mb-4 text-green-400 font-bold px-4">
                @switch (_userView.SubscriptionType)
                {
                    case SubscriptionType.MonthlyOnce or SubscriptionType.YearlyOnce:
                        @($"{Loc["ActiveSubscription"]} {_userView.SubscriptionStartDate} - {_userView.SubscriptionEndDate}")
                        break;
                    case SubscriptionType.MonthlyRecurring:
                        @if (_userView.SubscriptionEndDate is not null)
                        {
                            @($"{Loc["ActiveSubscription"]} {_userView.SubscriptionStartDate} - {_userView.SubscriptionEndDate}")
                        }
                        else
                        {
                            @($"{Loc["ActiveSubscription"]} {_userView.SubscriptionStartDate} ({Loc["AutoRenewMonthly"]})")
                        }
                        break;
                    case SubscriptionType.YearlyRecurring:
                        @if (_userView.SubscriptionEndDate is not null)
                        {
                            @($"{Loc["ActiveSubscription"]} {_userView.SubscriptionStartDate} - {_userView.SubscriptionEndDate}")
                        }
                        else
                        {
                            @($"{Loc["ActiveSubscription"]} {_userView.SubscriptionStartDate} ({Loc["AutoRenewYearly"]})")
                        }
                        break;
                }
            </p>

            @if (_userView.SubscriptionType is SubscriptionType.MonthlyRecurring or SubscriptionType.YearlyRecurring && _userView.SubscriptionEndDate is null && !_hideCancelForm)
            {
                <EditForm EditContext="_editContext" method="post" OnValidSubmit="Cancel" FormName="cancel"
                          class="space-y-6">
                    <DataAnnotationsValidator/>
                    <div class="flex flex-col space-y-4 items-center mb-10 mt-4">
                        <button type="submit" class="border-2 border-white p-3">@Loc["CancelRenewal"]</button>
                    </div>
                </EditForm>
                
                <p class="mt-8 text-center mb-4 px-4">
                    <strong>@Loc["CancelSubscriptionDesc"]</strong>
                </p>
            }
        }
        else
        {
            <RenewSubscription UserId="_userId" />
        }
    }

    <div class="mb-10"></div>
    
</section>

<script src="js/mobileMenu.js"></script>


@code {

    private Guid _userId;
    private UserView? _userView;
    private string? _message;
    private bool _hideCancelForm = false;
    
    [SupplyParameterFromForm(FormName = "cancel")]
    private CancelSubscriptionModel CancelSubscriptionInput { get; set; } = new();
    private EditContext? _editContext;
    
    [SupplyParameterFromQuery(Name = "session-id")]
    public string? CheckoutSessionId { get; set; }
    

    protected override async Task OnInitializedAsync()
    {
        _editContext = new EditContext(CancelSubscriptionInput);
        
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();

        if (authState.User.Identity?.IsAuthenticated != true) return;
        if (authState.User.Claims.All(c => c.Type != ClaimTypes.NameIdentifier)) return;

        _userId = new Guid(authState.User.Claims.First(c => c.Type == ClaimTypes.NameIdentifier).Value);

        _userView = await DbContext.UsersView.FirstAsync(uv => uv.Id == _userId);

        if (CheckoutSessionId is not null)
        {
            var sub = await DbContext.Subscriptions
                .FirstOrDefaultAsync(s => s.StripeSessionCheckoutId == CheckoutSessionId);

            if (sub is not null)
            {
                if (sub.Type is SubscriptionType.MonthlyOnce or SubscriptionType.YearlyOnce)
                {
                    var result = await StripeService.RetrievePaymentIntentIdIfPaid(CheckoutSessionId);
                    if (result.IsSuccess)
                    {
                        sub.MarkPaymentAsPaid(result.Value);
                    }
                }

                await DbContext.SaveChangesAsync();

                _message = Loc["SubscriptionRenewed"];
            }
        }
    }

    public async Task Cancel()
    {
        if (_userView?.StripeSubscriptionId is null) return;

        await StripeService.CancelSubscription(_userView.StripeSubscriptionId);

        switch (_userView.SubscriptionType)
        {
            case SubscriptionType.MonthlyRecurring:
            {
                var nextMonth = DateTime.Now.AddMonths(1);
                var endDate = new DateTime(nextMonth.Year, nextMonth.Month, _userView.SubscriptionStartDate!.Value.Day);

                await DbContext.Subscriptions.Where(u => u.Id == _userView.SubscriptionId)
                    .ExecuteUpdateAsync(setters => setters
                        .SetProperty(b => b.End, DateOnly.FromDateTime(endDate)));
                break;
            }
            case SubscriptionType.YearlyRecurring:
            {
                var nextYear = DateTime.Now.AddYears(1);
                var endDate = new DateTime(nextYear.Year, nextYear.Month,  _userView.SubscriptionStartDate!.Value.Day);

                await DbContext.Subscriptions.Where(u => u.Id == _userView.SubscriptionId)
                    .ExecuteUpdateAsync(setters => setters
                        .SetProperty(b => b.End, DateOnly.FromDateTime(endDate)));
                break;
            }
        }
        await DbContext.SaveChangesAsync();
        
        _message = Loc["SubscriptionCancelled"];
        _hideCancelForm = true;
        _userView = await DbContext.UsersView.FirstAsync(uv => uv.Id == _userId);
    }
    
    private sealed class CancelSubscriptionModel
    {
    }

}
