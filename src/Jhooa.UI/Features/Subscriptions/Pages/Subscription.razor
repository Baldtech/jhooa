@page "/Account/Manage/Subscription"
@attribute [Authorize]
@layout ManageLayout

@using System.Security.Claims
@using Jhooa.UI.Features.Identity.Models
@using Jhooa.UI.Features.Identity.Shared
@using Jhooa.UI.Features.Subscriptions.Models
@using Jhooa.UI.Services
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Localization

@inject IStringLocalizer<Resources.Subscriptions> Loc
@inject IStripeService StripeService
@inject ApplicationDbContext DbContext
@inject AuthenticationStateProvider AuthStateProvider
@inject IStringLocalizer<Jhooa.UI.Features.Home.Resources.Home> LocHome
@inject IStringLocalizer<Jhooa.UI.Features.Identity.Resources.Identity> LocIdentity
@inject IStringLocalizer<Jhooa.UI.Resources.Shared> LocShared
@inject NavigationManager NavigationManager

<PageTitle>@Loc["MySubscription"]</PageTitle>

<section class="max-w-screen-md mx-auto  text-white">
    <h2 class="text-xl font-semibold text-center mb-4">@Loc["MySubscriptionTitle"]</h2>

    <p class="text-center mb-4 px-4">@Loc["MySubscriptionDesc"]</p>

    <StatusMessage Message="@_message"/>


    @if (_userView is not null && _userView.IsSubscriptionActive)
    {
        <p class="text-center mb-4 text-green-400 font-bold">
            @* @Loc["ActiveSubscription"] @_userView.SubscriptionStartDate @(_userView.SubscriptionEndDate.HasValue ? $"- {_userView.SubscriptionEndDate}" : _activeSub.Status is SubscriptionStatus.Cancelled ? $" ({Loc["Cancelled"]})" : $" ({Loc["AutoRenew"]})") *@

            @if (_userView.SubscriptionType is SubscriptionType.MonthlyOnce or SubscriptionType.YearlyOnce)
            {
                @($"{Loc["ActiveSubscription"]} {_userView.SubscriptionStartDate} - {_userView.SubscriptionEndDate}")
            }
        </p>
    }
    else
    {
        <p class="text-center mb-4 text-red-400">@Loc["NoActiveSubscription"]</p>
        <div class="w-[50%] mx-auto">
            <EditForm Model="SubscribeModelInput" method="post" OnValidSubmit="Subscribe" FormName="login"
                      class="space-y-6">
                <DataAnnotationsValidator/>
                <InputRadioGroup @bind-Value="SubscribeModelInput.SubscriptionType" class="mb-8">
                    <div
                        class="inline-flex items-center space-x-3 w-full rounded-full bg-jhooa-peach-100 border-2 border-white px-6 py-3 mb-3">
                        <InputRadio id="option1"
                                    class="h-5 w-5 rounded-full text-jhooa-brick-500 bg-transparent border-white border-3 focus:ring-0  mr-2"
                                    Value="SubscriptionType.MonthlyOnce"/>

                        <div class="flex flex-row w-full">
                            <label class="basis-1/2 text-white md:text-lg font-monetaRegular">
                                @LocIdentity["RegisterMonthly"]
                            </label>
                            <label class="basis-1/2 text-white md:text-lg font-monetaRegular text-end">
                                7 @LocHome["PriceMonthlyDesc"]
                            </label>
                        </div>
                    </div>
                    <div
                        class="inline-flex items-center space-x-3 w-full rounded-full bg-jhooa-peach-100 border-2 border-white px-6 py-3 mb-3">
                        <InputRadio id="option2"
                                    class="h-5 w-5 rounded-full text-jhooa-brick-500 bg-transparent border-white border-3 focus:ring-0  mr-2"
                                    Value="SubscriptionType.MonthlyRecurring"/>

                        <div class="flex flex-row w-full">
                            <label class="basis-[70%] text-white md:text-lg font-monetaRegular">
                                @LocIdentity["RegisterMonthlyRecurring"]
                            </label>
                            <label class="basis-[30%] text-white md:text-lg font-monetaRegular text-end">
                                7 @LocHome["PriceMonthlyDesc"]
                            </label>
                        </div>
                    </div>
                    <div
                        class="inline-flex items-center space-x-3 w-full rounded-full bg-jhooa-brick-500 border-2 border-white px-6 py-3 mb-3">
                        <InputRadio id="option3"
                                    class="h-5 w-5 rounded-full text-jhooa-peach-100 bg-transparent border-white border-3 focus:ring-0  mr-2"
                                    Value="SubscriptionType.YearlyOnce"/>

                        <div class="flex flex-row w-full">
                            <label class="basis-[70%] text-white md:text-lg font-monetaRegular">
                                @LocIdentity["RegisterYearly"]
                            </label>
                            <label class="basis-[30%] text-white md:text-lg font-monetaRegular text-end">
                                70 @LocHome["PriceYearlyDesc"]
                            </label>
                        </div>
                    </div>
                    <div
                        class="inline-flex items-center space-x-3 w-full rounded-full bg-jhooa-brick-500 border-2 border-white px-6 py-3 mb-3">
                        <InputRadio id="option4"
                                    class="h-5 w-5 rounded-full text-jhooa-peach-100 bg-transparent border-white border-3 focus:ring-0  mr-2"
                                    Value="SubscriptionType.YearlyRecurring"/>

                        <div class="flex flex-row w-full">
                            <label class="basis-[70%] text-white md:text-lg font-monetaRegular">
                                @LocIdentity["RegisterYearlyRecurring"]
                            </label>
                            <label class="basis-[30%] text-white md:text-lg font-monetaRegular text-end">
                                70 @LocHome["PriceYearlyDesc"]
                            </label>
                        </div>
                    </div>

                    <div class="flex flex-col space-y-4 items-center mb-10 mt-4">
                        <button type="submit" class="border-2 border-white p-3">@LocShared["SaveChanges"]</button>
                    </div>

                </InputRadioGroup>
            </EditForm>
        </div>
    }
</section>

<script src="js/mobileMenu.js"></script>


@code {

    private Guid _userId;
    private UserView? _userView;
    private string? _message;

    [SupplyParameterFromForm] private SubscribeModel SubscribeModelInput { get; set; } = new();

    [SupplyParameterFromQuery(Name = "session-id")] public string? CheckoutSessionId { get; set; }

    protected override void OnParametersSet()
    {
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();

        if (authState.User.Identity?.IsAuthenticated != true) return;
        if (authState.User.Claims.All(c => c.Type != ClaimTypes.NameIdentifier)) return;

        _userId = new Guid(authState.User.Claims.First(c => c.Type == ClaimTypes.NameIdentifier).Value);

        _userView = await DbContext.UsersView.FirstAsync(uv => uv.Id == _userId);
        
        if (CheckoutSessionId is not null)
        {
            var sub = await DbContext.Subscriptions
                .FirstOrDefaultAsync(s => s.StripeSessionCheckoutId == CheckoutSessionId);

            if (sub is not null)
            {
                if (sub.Type is SubscriptionType.MonthlyOnce or SubscriptionType.YearlyOnce)
                {
                    var result = await StripeService.RetrievePaymentIntentIdIfPaid(CheckoutSessionId);
                    if (result.IsSuccess)
                    {
                        sub.MarkPaymentAsPaid(result.Value);
                    }
                }

                await DbContext.SaveChangesAsync();
                
                _message = Loc["SubscriptionRenewed"];
            }
        }
    }

    public async Task Subscribe(EditContext editContext)
    {
        var user = await DbContext.Users.FirstAsync(u => u.Id == _userId);
        
        var session = await StripeService.GeneratePaymentIntent(user.StripeCustomerId!, SubscribeModelInput.SubscriptionType);
        var sub = new Jhooa.UI.Features.Subscriptions.Models.Subscription
        {
            Start = DateOnly.FromDateTime(DateTime.Now),
            End = GetEndDate(SubscribeModelInput.SubscriptionType),
            UserId = user.Id,
            StripeSessionCheckoutId = session.SessionId,
            Type = SubscribeModelInput.SubscriptionType
        };

        await DbContext.Subscriptions.AddAsync(sub);
        await DbContext.SaveChangesAsync();

        NavigationManager.NavigateTo(session.SessionUrl);
    }
    
    private static DateOnly? GetEndDate(SubscriptionType type)
        => type switch
        {
            SubscriptionType.MonthlyOnce
                => DateOnly.FromDateTime(DateTime.Now.AddMonths(1)),
            SubscriptionType.YearlyOnce
                => DateOnly.FromDateTime(DateTime.Now.AddYears(1)),
            SubscriptionType.MonthlyRecurring => null,
            SubscriptionType.YearlyRecurring => null,
            _ => throw new ArgumentOutOfRangeException(nameof(type), type, null)
        };

    private sealed class SubscribeModel
    {
        public SubscriptionType SubscriptionType { get; set; }
    }

    private sealed class CancelSubscriptionModel
    {
    }

}
