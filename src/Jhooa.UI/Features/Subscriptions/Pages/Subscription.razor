@page "/Account/Manage/Subscription"
@attribute [Authorize]
@layout ManageLayout

@using System.Security.Claims
@using Jhooa.UI.Features.Identity.Shared
@using Jhooa.UI.Features.Subscriptions.Models
@using Jhooa.UI.Services
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Localization

@inject IStringLocalizer<Resources.Subscriptions> Loc
@inject IStripeService StriveService
@inject ApplicationDbContext DbContext
@inject AuthenticationStateProvider AuthStateProvider
@inject IDreamService DreamService

<PageTitle>@Loc["MySubscription"]</PageTitle>

<section class="max-w-screen-md mx-auto  text-white">
    <h2 class="text-xl font-semibold text-center mb-4">@Loc["MySubscriptionTitle"]</h2>

    <p class="text-center mb-4">@Loc["MySubscriptionDesc"]</p>

    @if (_activeSub is null)
    {
        <p class="text-center mb-4 text-red-400">@Loc["NoActiveSubscription"]</p>
    }
    else
    {
        <p class="text-center mb-4 text-green-400 font-bold">
            @Loc["ActiveSubscription"] @_activeSub.Start @(_activeSub.End.HasValue ? $"- {_activeSub.End}" : _activeSub.Status is SubscriptionStatus.Cancelled ? $" ({Loc["Cancelled"]})" : $" ({Loc["AutoRenew"]})")
        </p>

        if (_activeSub.Type is SubscriptionType.MonthlyRecurring or SubscriptionType.YearlyRecurring && _activeSub.Status is not SubscriptionStatus.Cancelled)
        {
            <EditForm Model="CancelSubscriptionInputModel" method="post" OnValidSubmit="CancelSubscriptionAsync"
                      FormName="cancelSubscription" class="space-y-6">
                <button type="submit" class="border-2 border-white p-3 bg-gray-400">@Loc["Cancel"]</button>
            </EditForm>
        }
    }
</section>

@* <h3>Subscriptions</h3> *@
@* *@
@* @if (!string.IsNullOrWhiteSpace(Message)) *@
@* { *@
@*     <h4 style="color: #26b050">@Message</h4> *@
@* } *@
@* *@
@* @if (_activeSub is null) *@
@* { *@
@*     <p>No active subscription</p> *@
@* } *@
@* else *@
@* { *@
@*     <p>Active subscription (access to events & videos): @_activeSub.Start @(_activeSub.End.HasValue ? $"- {_activeSub.End}" : $" ({_activeSub.Type} - auto-renew)")</p> *@
@*     <p>Next dreams eligibility</p> *@
@*     <ul> *@
@*         @foreach(var month in _eligibleMonths) *@
@*         { *@
@*             <li>@month.ToString("Y") (winners announced early @month.AddMonths(1).ToString("Y"))</li> *@
@*         } *@
@*     </ul> *@
@*     @if (_activeSub.End is null) *@
@*     { *@
@*         <p><strong>As long as the subscription is active, you will be eligible.</strong></p> *@
@*         <EditForm Model="Input" FormName="cancel-subscription" OnValidSubmit="OnValidSubmitAsync" method="post"> *@
@*             <DataAnnotationsValidator /> *@
@*             <ValidationSummary class="text-danger" role="alert" /> *@
@*             <button type="submit" class="w-100 btn btn-lg btn-primary">Cancel subscription</button> *@
@*         </EditForm> *@
@*     } *@
@* } *@


@code {

    private Guid _userId;
    private List<Jhooa.UI.Features.Subscriptions.Models.Subscription>? _subscriptions = new();
    private Jhooa.UI.Features.Subscriptions.Models.Subscription? _activeSub;

    // [SupplyParameterFromQuery(Name = "session-id")]
    // public string? CheckoutSessionId { get; set; }

    // private string? Message { get; set; }
    // 
    [SupplyParameterFromForm] private CancelSubscriptionModel? CancelSubscriptionInputModel { get; set; } = new();
    //
    // private List<Jhooa.UI.Features.Subscriptions.Models.Subscription>? _subscriptions = new();
    // private Jhooa.UI.Features.Subscriptions.Models.Subscription? _activeSub;
    // private List<DateOnly> _eligibleMonths = new();

    protected override void OnParametersSet()
    {
        CancelSubscriptionInputModel ??= new CancelSubscriptionModel();
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();

        if (authState.User.Identity?.IsAuthenticated != true) return;
        if (authState.User.Claims.All(c => c.Type != ClaimTypes.NameIdentifier)) return;

        _userId = new Guid(authState.User.Claims.First(c => c.Type == ClaimTypes.NameIdentifier).Value);

        _subscriptions = await DbContext.Subscriptions.Where(s => s.UserId == _userId).ToListAsync();
        _activeSub = _subscriptions.FirstOrDefault(s =>
            s.IsPaid &&
            s.Start <= DateOnly.FromDateTime(DateTime.Now) &&
            (s.End is null || s.End > DateOnly.FromDateTime(DateTime.Now)));


        // if (authState.User.Claims.Any(c => c.Type == ClaimTypes.NameIdentifier))
        // {
        //     _userId = new Guid(authState.User.Claims.First(c => c.Type == ClaimTypes.NameIdentifier).Value);
        //
        //     Input ??= new InputModel();
        //
        //     if (CheckoutSessionId is not null)
        //     {
        //         var sub = await DbContext.Subscriptions
        //             .FirstOrDefaultAsync(s => s.StripeSessionCheckoutId == CheckoutSessionId && s.UserId == _userId);
        //
        //         if (sub is not null)
        //         {
        //             if (sub.Type is SubscriptionType.MonthlyOnce or SubscriptionType.YearlyOnce)
        //             {
        //                 var result = await StriveService.RetrievePaymentIntentIdIfPaid(CheckoutSessionId);
        //                 if (result.IsSuccess)
        //                 {
        //                     sub.MarkPaymentAsPaid(result.Value);
        //                 }
        //             }
        //             else
        //             {
        //                 var result = await StriveService.RetrieveSubscriptionId(CheckoutSessionId);
        //                 if (result.IsSuccess)
        //                 {
        //                     sub.MarkSubscriptionAsPaid(result.Value);
        //                 }
        //             }
        //
        //             await DbContext.SaveChangesAsync();
        //         }
        //     }
        //
        //     await ResetSubscriptions(_userId);
        // }
    }

    // private async Task ResetSubscriptions(Guid userId)
    // {
    //     _subscriptions = await DbContext.Subscriptions
    //         .Where(s => s.UserId == userId)
    //         .ToListAsync();
    //
    //     _activeSub = _subscriptions.FirstOrDefault(s =>
    //         s.IsPaid &&
    //         s.Start <= DateOnly.FromDateTime(DateTime.Now) &&
    //         (s.End is null || s.End > DateOnly.FromDateTime(DateTime.Now)));
    //
    //     if (_activeSub is not null)
    //     {
    //         _eligibleMonths = DreamService.GetEligibleDates(_activeSub);
    //     }
    // }
    //
    private async Task CancelSubscriptionAsync()
    {
        if (CancelSubscriptionInputModel is not null && _activeSub is not null && !string.IsNullOrWhiteSpace(_activeSub.StripeSubscriptionId))
        {
            await StriveService.CancelSubscription(_activeSub.StripeSubscriptionId);

            var currentDate = DateOnly.FromDateTime(DateTime.Today);

            if (_activeSub.Type is SubscriptionType.MonthlyRecurring)
            {
                _activeSub.End = new DateOnly(currentDate.Month == 12 ? currentDate.Year + 1 : currentDate.Year,
                    currentDate.Month == 12 ? 1 : currentDate.Month + 1,
                    day: _activeSub.Start.Day);
            }
            else if (_activeSub.Type is SubscriptionType.YearlyRecurring)
            {
                _activeSub.End = new DateOnly(currentDate.Year + 1,
                    _activeSub.Start.Month,
                    day: _activeSub.Start.Day);
            }

            await DbContext.Subscriptions.Where(e => e.Id == _activeSub.Id)
                    .ExecuteUpdateAsync(setters => setters
                        .SetProperty(b => b.End, _activeSub.End)
                        .SetProperty(b => b.Status, SubscriptionStatus.Cancelled))
                ;
            
            await DbContext.SaveChangesAsync();
        }

        ;
    }

    private sealed class CancelSubscriptionModel
    {
    }

}
