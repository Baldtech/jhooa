@page "/Account/Manage/Subscription"
@attribute [Authorize]
@layout AccountLayout

@using System.Security.Claims
@using Jhooa.UI.Features.Identity.Shared
@using Jhooa.UI.Features.Subscriptions.Models
@using Jhooa.UI.Services
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Localization

@inject IStringLocalizer<Resources.Subscriptions> Loc
@inject IStripeService StriveService
@inject ApplicationDbContext DbContext
@inject AuthenticationStateProvider AuthStateProvider
@inject IDreamService DreamService

<PageTitle>@Loc["MySubscription"]</PageTitle>

<section class="max-w-screen-xl mx-auto  text-white">
    <h3>@Loc["MySubscriptionTitle"]</h3>
    <p>@Loc["MySubscriptionDesc"]</p>

    @* @if (Input is not null) *@
    @* { *@
    @*     <EditForm Model="Input" method="post" OnValidSubmit="OnValidSubmitAsync" FormName="login" class="space-y-6"> *@
    @*         <StatusMessage/> *@
    @*         <DataAnnotationsValidator/> *@
    @* *@
    @*         <div class="grid grid-cols-1 gap-4"> *@
    @*             <div class=""> *@
    @*                 *@
    @*             </div> *@
    @* *@
    @*             <button type="submit" class="border-2 border-white p-3 bg-gray-400">@Loc["SaveChanges"]</button> *@
    @* *@
    @*         </div> *@
    @*     </EditForm> *@
    @* } *@
</section>

@* <h3>Subscriptions</h3> *@
@* *@
@* @if (!string.IsNullOrWhiteSpace(Message)) *@
@* { *@
@*     <h4 style="color: #26b050">@Message</h4> *@
@* } *@
@* *@
@* @if (_activeSub is null) *@
@* { *@
@*     <p>No active subscription</p> *@
@* } *@
@* else *@
@* { *@
@*     <p>Active subscription (access to events & videos): @_activeSub.Start @(_activeSub.End.HasValue ? $"- {_activeSub.End}" : $" ({_activeSub.Type} - auto-renew)")</p> *@
@*     <p>Next dreams eligibility</p> *@
@*     <ul> *@
@*         @foreach(var month in _eligibleMonths) *@
@*         { *@
@*             <li>@month.ToString("Y") (winners announced early @month.AddMonths(1).ToString("Y"))</li> *@
@*         } *@
@*     </ul> *@
@*     @if (_activeSub.End is null) *@
@*     { *@
@*         <p><strong>As long as the subscription is active, you will be eligible.</strong></p> *@
@*         <EditForm Model="Input" FormName="cancel-subscription" OnValidSubmit="OnValidSubmitAsync" method="post"> *@
@*             <DataAnnotationsValidator /> *@
@*             <ValidationSummary class="text-danger" role="alert" /> *@
@*             <button type="submit" class="w-100 btn btn-lg btn-primary">Cancel subscription</button> *@
@*         </EditForm> *@
@*     } *@
@* } *@


@code {

    [SupplyParameterFromQuery(Name = "session-id")]
    public string? CheckoutSessionId { get; set; }

    private string? Message { get; set; }
    private Guid _userId;
    [SupplyParameterFromForm]
    private InputModel? Input { get; set; }

    private List<Jhooa.UI.Features.Subscriptions.Models.Subscription>? _subscriptions = new();
    private Jhooa.UI.Features.Subscriptions.Models.Subscription? _activeSub;
    private List<DateOnly> _eligibleMonths = new();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();

        if (authState.User.Identity?.IsAuthenticated == true)
        {
            if (authState.User.Claims.Any(c => c.Type == ClaimTypes.NameIdentifier))
            {
                _userId = new Guid(authState.User.Claims.First(c => c.Type == ClaimTypes.NameIdentifier).Value);

                Input ??= new InputModel();

                if (CheckoutSessionId is not null)
                {
                    var sub = await DbContext.Subscriptions
                        .FirstOrDefaultAsync(s => s.StripeSessionCheckoutId == CheckoutSessionId && s.UserId == _userId);

                    if (sub is not null)
                    {
                        if (sub.Type is SubscriptionType.MonthlyOnce or SubscriptionType.YearlyOnce)
                        {
                            var result = await StriveService.RetrievePaymentIntentIdIfPaid(CheckoutSessionId);
                            if (result.IsSuccess)
                            {
                                sub.MarkPaymentAsPaid(result.Value);
                            }
                        }
                        else
                        {
                            var result = await StriveService.RetrieveSubscriptionId(CheckoutSessionId);
                            if (result.IsSuccess)
                            {
                                sub.MarkSubscriptionAsPaid(result.Value);
                            }
                        }
                        
                        await DbContext.SaveChangesAsync();
                    }
                }

                await ResetSubscriptions(_userId);
            }
        }
    }

    private async Task ResetSubscriptions(Guid userId)
    {
        _subscriptions = await DbContext.Subscriptions
            .Where(s => s.UserId == userId)
            .ToListAsync();

        _activeSub = _subscriptions.FirstOrDefault(s =>
            s.IsPaid &&
            s.Start <= DateOnly.FromDateTime(DateTime.Now) &&
            (s.End is null || s.End > DateOnly.FromDateTime(DateTime.Now)));

        if (_activeSub is not null)
        {
            _eligibleMonths = DreamService.GetEligibleDates(_activeSub);
        }
    }

    private async Task OnValidSubmitAsync()
    {
        if (_activeSub is null) return;

        await StriveService.CancelSubscription(_activeSub.StripeSubscriptionId!);
        
        _activeSub.MarkSubscriptionAsCancelled();
        await DbContext.SaveChangesAsync();
        Message = "Subscription cancelled";
        
        await ResetSubscriptions(_userId);

    }
    
    private sealed class InputModel
    {

    }
}