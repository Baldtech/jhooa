@page "/Admin/Video/{id:guid?}"
@attribute [Authorize(Roles = "Admin")]
@layout AdminLayout
@rendermode InteractiveServer

@using System.ComponentModel.DataAnnotations
@using Jhooa.UI.Components.Layout
@using Jhooa.UI.Features.Videos.Models
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Localization

@inject IStringLocalizer<Resources.Videos> Loc
@inject ApplicationDbContext DbContext
@inject NavigationManager NavigationManager

<PageTitle>@Loc["Videos"]</PageTitle>

<section class="max-w-screen-xl mx-auto w-full">
    <div>
        @if (Id.HasValue)
        {
            <h1 class="mb-8 text-4xl tracking-wider">@Loc["EditVideo"]</h1>
        }
        else
        {
            <h1 class="mb-8 text-4xl tracking-wider">@Loc["AddVideo"]</h1>
        }
        @if (Input != null)
        {
            <EditForm Model="Input" method="post" OnValidSubmit="OnValidSubmitAsync" FormName="formVideo"
                      class="space-y-6">
                <DataAnnotationsValidator/>
                <ValidationSummary/>
                @if (Id.HasValue)
                {
                    <InputText @bind-Value="Input.VideoId" hidden></InputText>
                }
                <div class="bg-[#FFFFFF1A] rounded-md px-4 py-6 space-y-6 mb-6">

                    <JhooaInputText @bind-Value="Input.VimeoId" DisplayName="@Loc["VideoId"]"
                                    ValidationFor="@(() => Input.VimeoId)"/>
                    <JhooaInputDate @bind-Value="Input.Date" DisplayName="@Loc["Date"]"
                                    ValidationFor="@(() => Input.Date)"/>

                    <div class="flex space-x-8 text-white">
                    @foreach (var theme in Input.Themes)
                    {
                        <label class="flex items-center space-x-2 cursor-pointer">

                            <InputCheckbox @bind-Value="theme.IsSelected" 
                                           type="checkbox" 
                                           class="h-5 w-5 border border-white rounded-sm bg-transparent checked:bg-transparent focus:border-0 active:border-0
                  "
                            />
                            <span>@theme.Name</span>
                        </label>
                        
@*                         <InputCheckbox @bind-Value="theme.IsSelected" class="appearance-none h-5 w-5 border border-white rounded-sm  *@
@*                    checked:bg-white checked:border-white focus:outline-none *@
@*                    transition duration-150 ease-in-out"/> *@
@*                         <label>@theme.Name</label> *@
                    }
                    </div>

                </div>

                <button type="submit"
                        class="px-8 py-3 text-sm bg-teal-500 rounded-3xl font-amsiProLight">@Loc["Save"]</button>
                <JhooaAdminActionButton
                    Url="/Admin/Videos"
                    Text="@Loc["Cancel"]"
                />

            </EditForm>
        }
    </div>
</section>



@code {
    [Parameter] public Guid? Id { get; set; }

    [SupplyParameterFromForm] private InputModel? Input { get; set; }

    private List<VideoTheme> _themes = [];
    private Video? _video;

    protected override async Task OnParametersSetAsync()
    {
        _themes = await DbContext.VideoThemes.ToListAsync();
        var iMThemes = _themes.Select(t => new ThemeInputModel
        {
            Id = t.Id,
            Name = CultureInfo.CurrentCulture.Name == "en-GB" ? t.NameEn : t.NameFr,
            IsSelected = false
        }).ToList();

        if (Id.HasValue)
        {
            _video = await DbContext.Videos.Include(i => i.Themes).FirstOrDefaultAsync(e => e.Id == Id.Value);
            if (_video is not null)
            {
                Input ??= new InputModel()
                {
                    Date = _video.Date,
                    VideoId = _video.Id.ToString(),
                    VimeoId = _video.VideoUrl,
                    Themes = iMThemes
                };

                foreach (var theme in _video.Themes)
                {
                    Input.Themes.First(t => t.Id == theme.Id).IsSelected = true;
                }
            }
        }
        else
        {
            Input ??= new InputModel()
            {
                VimeoId = "",
                Date = DateTime.Now,
                Themes = iMThemes
            };
        }
    }

    private async Task OnValidSubmitAsync()
    {
        if (Input is not null)
        {
            var selectedThemes = Input.Themes.Where(t => t.IsSelected).Select(t => t.Id).ToList();
            if (Input.VideoGuid.HasValue && _video is not null)
            {
                await DbContext.Videos.Where(e => e.Id == Input.VideoGuid)
                    .ExecuteUpdateAsync(setters => setters
                        .SetProperty(b => b.VideoUrl, Input.VimeoId)
                        .SetProperty(b => b.Date, Input.Date));

                DbContext.Videos.Attach(_video);

                _video.ResetThemes(_themes.Where(t => selectedThemes.Contains(t.Id)).ToList());
            }
            else
            {
                var newVideo = new Video()
                {
                    Id = Guid.NewGuid(),
                    VideoUrl = Input.VimeoId,
                    Date = Input.Date,
                };

                newVideo.ResetThemes(_themes.Where(t => selectedThemes.Contains(t.Id)).ToList());

                await DbContext.Videos.AddAsync(newVideo);
            }

            await DbContext.SaveChangesAsync();
        }

        NavigationManager.NavigateTo($"/Admin/Videos");
    }

    private sealed class InputModel
    {
        public string? VideoId { get; set; }
        public Guid? VideoGuid => VideoId is not null ? Guid.Parse(VideoId) : null;

        [Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Resources.Videos))]
        [StringLength(maximumLength: 2000, MinimumLength = 3, ErrorMessageResourceName = "FieldLength", ErrorMessageResourceType = typeof(Resources.Videos))]
        public required string VimeoId { get; set; }

        public DateTimeOffset Date { get; set; }

        public List<ThemeInputModel> Themes { get; set; } = [];
    }

    private sealed class ThemeInputModel
    {
        public Guid Id { get; set; }
        public string? Name { get; set; }
        public bool IsSelected { get; set; }
    }

}