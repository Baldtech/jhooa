@page "/Videos"
@rendermode InteractiveServer

@using System.Security.Claims
@using Jhooa.UI.Configuration
@using Microsoft.Extensions.Localization
@using Jhooa.UI.Features.Videos.Components
@using Microsoft.EntityFrameworkCore

@inject IStringLocalizer<Jhooa.UI.Resources.Shared> LocShared
@inject IStringLocalizer<Resources.Videos> Loc
@inject AuthenticationStateProvider AuthStateProvider
@inject ApplicationDbContext DbContext

<PageTitle>@LocShared["TitleVideos"]</PageTitle>

<HeadContent>
    <meta name="description" content="@LocShared["SeoDescription"]">
</HeadContent>

<section class="max-w-screen-xl mx-auto text-jhooa-gray px-4">
    <AuthorizeView>
        <Authorized>
            @if (CanSeeVideos)
            {
                <h1 class="text-jhooa-teal-200 text-3xl mt-10 mb-4 font-monetaBold tracking-wide">@Loc["VideosPageTitle"]</h1>

                <p class="mb-4 font-amsiProLight text-jhooa-gray-100 text-sm tracking-wider">@Loc["VideosPageText1"]</p>
                <p class="mb-4 font-amsiProLight text-jhooa-gray-100 text-sm tracking-wider">@Loc["VideosPageText2"]</p>
                <p class="mb-4 font-amsiProLight text-jhooa-gray-100 text-sm tracking-wider">@Loc["VideosPageText3"]</p>
                <p class="mb-4 font-amsiProLight text-jhooa-gray-100 text-sm tracking-wider">@Loc["VideosPageText4"]</p>

                <h2 class="text-jhooa-teal-200 text-3xl mt-10 mb-4 font-monetaBold tracking-wide">@Loc["TheVideos"]</h2>

                <FilterVideos SelectThemeCallback="HandleThemeSelection" SelectMonthCallback="HandleMonthSelection"
                              SelectYearCallback="HandleYearSelection"/>

                <VideoList SelectedMonth="_selectedMonth" SelectedTheme="_selectedTheme" SelectedYear="_selectedYear"
                           Subscribed="true"/>
            }
            else
            {
                <h1 class="text-jhooa-teal-200 text-3xl mt-10 mb-4 font-monetaBold tracking-wide">@Loc["VideosOnlyForConnectedUsersTitle"]</h1>

                <p class="mb-4 font-amsiProLight text-jhooa-gray-100 text-sm tracking-wider">@Loc["VideosOnlyForConnectedUsersDescNoSub"]</p>
            }
        </Authorized>
        <NotAuthorized>
            <h1 class="text-jhooa-teal-200 text-3xl mt-10 mb-4 font-monetaBold tracking-wide">@Loc["VideosOnlyForConnectedUsersTitle"]</h1>

            <p class="mb-4 font-amsiProLight text-jhooa-gray-100 text-sm tracking-wider">@Loc["NotConnectedVideosPageText1"]</p>
            <p class="mb-4 font-amsiProLight text-jhooa-gray-100 text-sm tracking-wider">@Loc["NotConnectedVideosPageText2"]</p>
            <p class="mb-4 font-amsiProLight text-jhooa-gray-100 text-sm tracking-wider">@Loc["NotConnectedVideosPageText3"]</p>
            <p class="mb-4 font-amsiProLight text-jhooa-gray-100 text-sm tracking-wider">@Loc["NotConnectedVideosPageText4"]</p>

            <ul class="space-y-1 list-disc mb-4 font-amsiProLight text-jhooa-gray-100 text-sm tracking-wider list-outside ml-4">
                <li>@((MarkupString)Loc["VideosOnlyForConnectedUsersAlreadyUsers"].ToString())</li>
                <li>@((MarkupString)Loc["VideosOnlyForConnectedUsersRegister"].ToString())</li>
            </ul>

            <h2 class="text-jhooa-teal-200 text-3xl mt-10 mb-4 font-monetaBold tracking-wide">@Loc["TheVideos"]</h2>

            <FilterVideos SelectThemeCallback="HandleThemeSelection" SelectMonthCallback="HandleMonthSelection"
                          SelectYearCallback="HandleYearSelection"/>

            <VideoList SelectedMonth="_selectedMonth" SelectedTheme="_selectedTheme" SelectedYear="_selectedYear"
                       Subscribed="false"/>
        </NotAuthorized>
    </AuthorizeView>
</section>

<script src="js/mobileMenu.js"></script>

@code {
    private Guid? _selectedTheme;
    private int? _selectedMonth;
    private int? _selectedYear;
    [Parameter] public bool CanSeeVideos { get; set; }

    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;


    private void HandleThemeSelection(Guid? theme)
    {
        _selectedTheme = theme;
    }

    private void HandleYearSelection(int? year)
    {
        _selectedYear = year;
    }

    private void HandleMonthSelection(int? month)
    {
        _selectedMonth = month;
    }

    protected override async Task OnParametersSetAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();

        if (authState.User.Identity?.IsAuthenticated == true)
        {
            var roleClaim = authState.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Role);
            if (roleClaim?.Value == "Admin")
            {
                CanSeeVideos = true;
                return;
            }

            var userId = new Guid(authState.User.Claims.First(c => c.Type == ClaimTypes.NameIdentifier).Value);

            var user = await DbContext.UsersView.FirstOrDefaultAsync(u => u.Id == userId);

            if (user is null || !user.IsSubscriptionActive)
            {
                CanSeeVideos = false;
                return;
            }
            
            CanSeeVideos = true;
        }
    }

}