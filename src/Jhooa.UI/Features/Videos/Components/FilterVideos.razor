@using System.Globalization
@using Jhooa.UI.Features.Videos.Models
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Localization
@inject ApplicationDbContext DbContext
@inject IStringLocalizer<Resources.Videos> Loc
@rendermode InteractiveServer

<div class="grid grid-cols-1 md:grid-cols-3 gap-4">

    <!-- Theme Selection -->
    <div>
        <label for="theme" class="block text-jhooa-teal-200 mb-2">@Loc["Theme"]</label>
        <InputSelect id="theme" class="w-full border-[3px] border-jhooa-beige-100  px-[25px] py-[10px] text-jhooa-beige-100 focus:outline-none focus:ring-0  focus:border-jhooa-beige-100"
                     @bind-Value="_selectedTheme">
            <option value="">@Loc["ChooseTheme"]</option>
            @foreach (var theme in _themes)
            {
                <option value="@theme.Id">@((CultureInfo.CurrentCulture.Name == "en-GB") ? theme.NameEn : theme.NameFr)</option>
            }
        </InputSelect>
    </div>

    <!-- Month Selection -->
    <div>
        <label for="month" class="block text-jhooa-teal-200 mb-2">@Loc["Month"]</label>
        <InputSelect id="month" class="w-full border-[3px] border-jhooa-beige-100  px-[25px] py-[10px] text-jhooa-beige-100 focus:outline-none focus:ring-0  focus:border-jhooa-beige-100"
                     @bind-Value="_selectedMonth">
            <option value="">@Loc["ChooseMonth"]</option>
            @foreach (var month in _months)
            {
                <option value="@month.Number.ToString()">@month.Name</option>
            }
        </InputSelect>
    </div>

    <!-- Year Selection -->
    <div>
        <label for="year" class="block text-jhooa-teal-200 mb-2">@Loc["Years"]</label>
        <InputSelect id="year" class="w-full border-[3px] border-jhooa-beige-100  px-[25px] py-[10px] text-jhooa-beige-100 focus:outline-none focus:ring-0  focus:border-jhooa-beige-100"
                     @bind-Value="_selectedYear">
            <option value="">@Loc["ChooseYear"]</option>
            @foreach (var year in _years)
            {
                <option value="@year">@year</option>
            }
        </InputSelect>
    </div>

</div>

@code {
    [Parameter] public EventCallback<Guid?> SelectThemeCallback { get; set; }
    [Parameter] public EventCallback<int?> SelectMonthCallback { get; set; }
    [Parameter] public EventCallback<int?> SelectYearCallback { get; set; }

    private Guid? _selectedTheme
    {
        get => _theme;
        set
        {
            if (_theme != value)
            {
                _theme = value;
                SelectThemeCallback.InvokeAsync(value);
            }
        }
    }

    private string? _selectedMonth
    {
        get => _month;
        set
        {
            if (_month != value)
            {
                _month = value;
                var monthNum = _months.FirstOrDefault(m => m.Number.ToString() == value)?.Number;
                SelectMonthCallback.InvokeAsync(monthNum);
            }
        }
    }

    private int? _selectedYear
    {
        get => _year;
        set
        {
            if (_year != value)
            {
                _year = value;
                SelectYearCallback.InvokeAsync(value);
            }
        }
    }

    private Guid? _theme;
    private string? _month;
    private int? _year;

    private List<VideoTheme> _themes = new();
    private List<MonthModel> _months = new();
    private List<int> _years = new();

    protected override async Task OnInitializedAsync()
    {
        _themes = await DbContext.VideoThemes.Take(21).ToListAsync();
        _years = Enumerable.Range(2025, 3).ToList();
        _months = Enumerable.Range(1, 12).Select(i => new MonthModel
        {
            Number = i,
            Name = new DateTime(2024, i, 1).ToString("MMMM")
        }).ToList();
    }

    private sealed class MonthModel
    {
        public int Number { get; init; }
        public string Name { get; init; } = string.Empty;
    }
}