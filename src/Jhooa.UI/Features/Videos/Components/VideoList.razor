@attribute [StreamRendering]
@using Jhooa.UI.Features.Videos.Models
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Localization
@inject ApplicationDbContext DbContext
@inject IStringLocalizer<Resources.Videos> Loc

@if (_videos.Count == 0)
{
    <p class="mt-6 font-amsiProLight text-jhooa-gray-100 text-sm tracking-wider">@Loc["NoVideosFound"]</p>
}
else
{
    <div class="mt-8 grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-6">

        @foreach (var video in _videos)
        {
            <div  class="relative group">
                <div class="aspect-video">
                    <iframe
                        src="https://player.vimeo.com/video/@(video.Key)?h=@(video.Value)&amp;badge=0&amp;autopause=0&amp;player_id=0&amp;app_id=58479"
                        frameborder="0"
                        allow="autoplay; fullscreen; picture-in-picture; clipboard-write; encrypted-media"
                        class="w-full h-full rounded-md"
                        title=""></iframe>
                </div>
            </div>
        }
    </div>
}


@code {

    [Parameter] public Guid? SelectedTheme { get; set; }
    [Parameter] public int? SelectedYear { get; set; }
    [Parameter] public int? SelectedMonth { get; set; }
    [Parameter] public bool Subscribed { get; set; }

    private Dictionary<string, string> _videos = [];

    protected override void OnInitialized()
    {
        _videos = [];
    }

    protected override async Task OnParametersSetAsync()
    {
        var query = DbContext.Videos.AsQueryable();

        if (SelectedTheme is not null)
        {
            query = query.Include(i => i.Themes).Where(v => v.Themes.Any(t => t.Id == SelectedTheme));
        }

        if (SelectedYear is not null)
        {
            query = query.Where(v => v.Date.Year == SelectedYear);
        }

        if (SelectedMonth is not null)
        {
            query = query.Where(v => v.Date.Month == SelectedMonth);
        }

        _videos =
            Subscribed
                ? await query.ToDictionaryAsync(item => item.SubscribedVimeoId, item => item.SubscribedVimeoHash)
                : await query.ToDictionaryAsync(item => item.NotSubscribedVimeoId, item => item.NotSubscribedVimeoHash);
    }

}